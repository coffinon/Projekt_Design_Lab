
Samochodzik.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026c4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080027d0  080027d0  000127d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080027fc  080027fc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080027fc  080027fc  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080027fc  080027fc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080027fc  080027fc  000127fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002800  08002800  00012800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002804  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  2000000c  08002810  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  08002810  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a552  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001c46  00000000  00000000  0002a587  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c10  00000000  00000000  0002c1d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b08  00000000  00000000  0002cde0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000172d7  00000000  00000000  0002d8e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a4bf  00000000  00000000  00044bbf  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000860eb  00000000  00000000  0004f07e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d5169  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003130  00000000  00000000  000d51e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080027b8 	.word	0x080027b8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080027b8 	.word	0x080027b8

0800014c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	4b08      	ldr	r3, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4a07      	ldr	r2, [pc, #28]	; (8000174 <HAL_Init+0x28>)
 8000156:	f043 0310 	orr.w	r3, r3, #16
 800015a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015c:	2003      	movs	r0, #3
 800015e:	f000 f945 	bl	80003ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000162:	2000      	movs	r0, #0
 8000164:	f000 f808 	bl	8000178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000168:	f002 f8d8 	bl	800231c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800016c:	2300      	movs	r3, #0
}
 800016e:	4618      	mov	r0, r3
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40022000 	.word	0x40022000

08000178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000180:	4b12      	ldr	r3, [pc, #72]	; (80001cc <HAL_InitTick+0x54>)
 8000182:	681a      	ldr	r2, [r3, #0]
 8000184:	4b12      	ldr	r3, [pc, #72]	; (80001d0 <HAL_InitTick+0x58>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	4619      	mov	r1, r3
 800018a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800018e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000192:	fbb2 f3f3 	udiv	r3, r2, r3
 8000196:	4618      	mov	r0, r3
 8000198:	f000 f95d 	bl	8000456 <HAL_SYSTICK_Config>
 800019c:	4603      	mov	r3, r0
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d001      	beq.n	80001a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001a2:	2301      	movs	r3, #1
 80001a4:	e00e      	b.n	80001c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2b0f      	cmp	r3, #15
 80001aa:	d80a      	bhi.n	80001c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ac:	2200      	movs	r2, #0
 80001ae:	6879      	ldr	r1, [r7, #4]
 80001b0:	f04f 30ff 	mov.w	r0, #4294967295
 80001b4:	f000 f925 	bl	8000402 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001b8:	4a06      	ldr	r2, [pc, #24]	; (80001d4 <HAL_InitTick+0x5c>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001be:	2300      	movs	r3, #0
 80001c0:	e000      	b.n	80001c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001c2:	2301      	movs	r3, #1
}
 80001c4:	4618      	mov	r0, r3
 80001c6:	3708      	adds	r7, #8
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	20000008 	.word	0x20000008
 80001d0:	20000004 	.word	0x20000004
 80001d4:	20000000 	.word	0x20000000

080001d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <HAL_IncTick+0x1c>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	461a      	mov	r2, r3
 80001e2:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <HAL_IncTick+0x20>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4413      	add	r3, r2
 80001e8:	4a03      	ldr	r2, [pc, #12]	; (80001f8 <HAL_IncTick+0x20>)
 80001ea:	6013      	str	r3, [r2, #0]
}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr
 80001f4:	20000004 	.word	0x20000004
 80001f8:	20000028 	.word	0x20000028

080001fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000200:	4b02      	ldr	r3, [pc, #8]	; (800020c <HAL_GetTick+0x10>)
 8000202:	681b      	ldr	r3, [r3, #0]
}
 8000204:	4618      	mov	r0, r3
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	20000028 	.word	0x20000028

08000210 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b084      	sub	sp, #16
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000218:	f7ff fff0 	bl	80001fc <HAL_GetTick>
 800021c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000222:	68fb      	ldr	r3, [r7, #12]
 8000224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000228:	d005      	beq.n	8000236 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800022a:	4b09      	ldr	r3, [pc, #36]	; (8000250 <HAL_Delay+0x40>)
 800022c:	781b      	ldrb	r3, [r3, #0]
 800022e:	461a      	mov	r2, r3
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	4413      	add	r3, r2
 8000234:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000236:	bf00      	nop
 8000238:	f7ff ffe0 	bl	80001fc <HAL_GetTick>
 800023c:	4602      	mov	r2, r0
 800023e:	68bb      	ldr	r3, [r7, #8]
 8000240:	1ad3      	subs	r3, r2, r3
 8000242:	68fa      	ldr	r2, [r7, #12]
 8000244:	429a      	cmp	r2, r3
 8000246:	d8f7      	bhi.n	8000238 <HAL_Delay+0x28>
  {
  }
}
 8000248:	bf00      	nop
 800024a:	3710      	adds	r7, #16
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}
 8000250:	20000004 	.word	0x20000004

08000254 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000254:	b480      	push	{r7}
 8000256:	b085      	sub	sp, #20
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	f003 0307 	and.w	r3, r3, #7
 8000262:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000264:	4b0c      	ldr	r3, [pc, #48]	; (8000298 <__NVIC_SetPriorityGrouping+0x44>)
 8000266:	68db      	ldr	r3, [r3, #12]
 8000268:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800026a:	68ba      	ldr	r2, [r7, #8]
 800026c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000270:	4013      	ands	r3, r2
 8000272:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000278:	68bb      	ldr	r3, [r7, #8]
 800027a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800027c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000280:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000284:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000286:	4a04      	ldr	r2, [pc, #16]	; (8000298 <__NVIC_SetPriorityGrouping+0x44>)
 8000288:	68bb      	ldr	r3, [r7, #8]
 800028a:	60d3      	str	r3, [r2, #12]
}
 800028c:	bf00      	nop
 800028e:	3714      	adds	r7, #20
 8000290:	46bd      	mov	sp, r7
 8000292:	bc80      	pop	{r7}
 8000294:	4770      	bx	lr
 8000296:	bf00      	nop
 8000298:	e000ed00 	.word	0xe000ed00

0800029c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800029c:	b480      	push	{r7}
 800029e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__NVIC_GetPriorityGrouping+0x18>)
 80002a2:	68db      	ldr	r3, [r3, #12]
 80002a4:	0a1b      	lsrs	r3, r3, #8
 80002a6:	f003 0307 	and.w	r3, r3, #7
}
 80002aa:	4618      	mov	r0, r3
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bc80      	pop	{r7}
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	e000ed00 	.word	0xe000ed00

080002b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002b8:	b480      	push	{r7}
 80002ba:	b083      	sub	sp, #12
 80002bc:	af00      	add	r7, sp, #0
 80002be:	4603      	mov	r3, r0
 80002c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	db0b      	blt.n	80002e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002ca:	79fb      	ldrb	r3, [r7, #7]
 80002cc:	f003 021f 	and.w	r2, r3, #31
 80002d0:	4906      	ldr	r1, [pc, #24]	; (80002ec <__NVIC_EnableIRQ+0x34>)
 80002d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002d6:	095b      	lsrs	r3, r3, #5
 80002d8:	2001      	movs	r0, #1
 80002da:	fa00 f202 	lsl.w	r2, r0, r2
 80002de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002e2:	bf00      	nop
 80002e4:	370c      	adds	r7, #12
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bc80      	pop	{r7}
 80002ea:	4770      	bx	lr
 80002ec:	e000e100 	.word	0xe000e100

080002f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002f0:	b480      	push	{r7}
 80002f2:	b083      	sub	sp, #12
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	4603      	mov	r3, r0
 80002f8:	6039      	str	r1, [r7, #0]
 80002fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000300:	2b00      	cmp	r3, #0
 8000302:	db0a      	blt.n	800031a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000304:	683b      	ldr	r3, [r7, #0]
 8000306:	b2da      	uxtb	r2, r3
 8000308:	490c      	ldr	r1, [pc, #48]	; (800033c <__NVIC_SetPriority+0x4c>)
 800030a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800030e:	0112      	lsls	r2, r2, #4
 8000310:	b2d2      	uxtb	r2, r2
 8000312:	440b      	add	r3, r1
 8000314:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000318:	e00a      	b.n	8000330 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800031a:	683b      	ldr	r3, [r7, #0]
 800031c:	b2da      	uxtb	r2, r3
 800031e:	4908      	ldr	r1, [pc, #32]	; (8000340 <__NVIC_SetPriority+0x50>)
 8000320:	79fb      	ldrb	r3, [r7, #7]
 8000322:	f003 030f 	and.w	r3, r3, #15
 8000326:	3b04      	subs	r3, #4
 8000328:	0112      	lsls	r2, r2, #4
 800032a:	b2d2      	uxtb	r2, r2
 800032c:	440b      	add	r3, r1
 800032e:	761a      	strb	r2, [r3, #24]
}
 8000330:	bf00      	nop
 8000332:	370c      	adds	r7, #12
 8000334:	46bd      	mov	sp, r7
 8000336:	bc80      	pop	{r7}
 8000338:	4770      	bx	lr
 800033a:	bf00      	nop
 800033c:	e000e100 	.word	0xe000e100
 8000340:	e000ed00 	.word	0xe000ed00

08000344 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000344:	b480      	push	{r7}
 8000346:	b089      	sub	sp, #36	; 0x24
 8000348:	af00      	add	r7, sp, #0
 800034a:	60f8      	str	r0, [r7, #12]
 800034c:	60b9      	str	r1, [r7, #8]
 800034e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000350:	68fb      	ldr	r3, [r7, #12]
 8000352:	f003 0307 	and.w	r3, r3, #7
 8000356:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000358:	69fb      	ldr	r3, [r7, #28]
 800035a:	f1c3 0307 	rsb	r3, r3, #7
 800035e:	2b04      	cmp	r3, #4
 8000360:	bf28      	it	cs
 8000362:	2304      	movcs	r3, #4
 8000364:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000366:	69fb      	ldr	r3, [r7, #28]
 8000368:	3304      	adds	r3, #4
 800036a:	2b06      	cmp	r3, #6
 800036c:	d902      	bls.n	8000374 <NVIC_EncodePriority+0x30>
 800036e:	69fb      	ldr	r3, [r7, #28]
 8000370:	3b03      	subs	r3, #3
 8000372:	e000      	b.n	8000376 <NVIC_EncodePriority+0x32>
 8000374:	2300      	movs	r3, #0
 8000376:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000378:	f04f 32ff 	mov.w	r2, #4294967295
 800037c:	69bb      	ldr	r3, [r7, #24]
 800037e:	fa02 f303 	lsl.w	r3, r2, r3
 8000382:	43da      	mvns	r2, r3
 8000384:	68bb      	ldr	r3, [r7, #8]
 8000386:	401a      	ands	r2, r3
 8000388:	697b      	ldr	r3, [r7, #20]
 800038a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800038c:	f04f 31ff 	mov.w	r1, #4294967295
 8000390:	697b      	ldr	r3, [r7, #20]
 8000392:	fa01 f303 	lsl.w	r3, r1, r3
 8000396:	43d9      	mvns	r1, r3
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800039c:	4313      	orrs	r3, r2
         );
}
 800039e:	4618      	mov	r0, r3
 80003a0:	3724      	adds	r7, #36	; 0x24
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bc80      	pop	{r7}
 80003a6:	4770      	bx	lr

080003a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b082      	sub	sp, #8
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	3b01      	subs	r3, #1
 80003b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80003b8:	d301      	bcc.n	80003be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80003ba:	2301      	movs	r3, #1
 80003bc:	e00f      	b.n	80003de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003be:	4a0a      	ldr	r2, [pc, #40]	; (80003e8 <SysTick_Config+0x40>)
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	3b01      	subs	r3, #1
 80003c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80003c6:	210f      	movs	r1, #15
 80003c8:	f04f 30ff 	mov.w	r0, #4294967295
 80003cc:	f7ff ff90 	bl	80002f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003d0:	4b05      	ldr	r3, [pc, #20]	; (80003e8 <SysTick_Config+0x40>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003d6:	4b04      	ldr	r3, [pc, #16]	; (80003e8 <SysTick_Config+0x40>)
 80003d8:	2207      	movs	r2, #7
 80003da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80003dc:	2300      	movs	r3, #0
}
 80003de:	4618      	mov	r0, r3
 80003e0:	3708      	adds	r7, #8
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bd80      	pop	{r7, pc}
 80003e6:	bf00      	nop
 80003e8:	e000e010 	.word	0xe000e010

080003ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b082      	sub	sp, #8
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80003f4:	6878      	ldr	r0, [r7, #4]
 80003f6:	f7ff ff2d 	bl	8000254 <__NVIC_SetPriorityGrouping>
}
 80003fa:	bf00      	nop
 80003fc:	3708      	adds	r7, #8
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}

08000402 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000402:	b580      	push	{r7, lr}
 8000404:	b086      	sub	sp, #24
 8000406:	af00      	add	r7, sp, #0
 8000408:	4603      	mov	r3, r0
 800040a:	60b9      	str	r1, [r7, #8]
 800040c:	607a      	str	r2, [r7, #4]
 800040e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000410:	2300      	movs	r3, #0
 8000412:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000414:	f7ff ff42 	bl	800029c <__NVIC_GetPriorityGrouping>
 8000418:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800041a:	687a      	ldr	r2, [r7, #4]
 800041c:	68b9      	ldr	r1, [r7, #8]
 800041e:	6978      	ldr	r0, [r7, #20]
 8000420:	f7ff ff90 	bl	8000344 <NVIC_EncodePriority>
 8000424:	4602      	mov	r2, r0
 8000426:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800042a:	4611      	mov	r1, r2
 800042c:	4618      	mov	r0, r3
 800042e:	f7ff ff5f 	bl	80002f0 <__NVIC_SetPriority>
}
 8000432:	bf00      	nop
 8000434:	3718      	adds	r7, #24
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}

0800043a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800043a:	b580      	push	{r7, lr}
 800043c:	b082      	sub	sp, #8
 800043e:	af00      	add	r7, sp, #0
 8000440:	4603      	mov	r3, r0
 8000442:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000444:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000448:	4618      	mov	r0, r3
 800044a:	f7ff ff35 	bl	80002b8 <__NVIC_EnableIRQ>
}
 800044e:	bf00      	nop
 8000450:	3708      	adds	r7, #8
 8000452:	46bd      	mov	sp, r7
 8000454:	bd80      	pop	{r7, pc}

08000456 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000456:	b580      	push	{r7, lr}
 8000458:	b082      	sub	sp, #8
 800045a:	af00      	add	r7, sp, #0
 800045c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800045e:	6878      	ldr	r0, [r7, #4]
 8000460:	f7ff ffa2 	bl	80003a8 <SysTick_Config>
 8000464:	4603      	mov	r3, r0
}
 8000466:	4618      	mov	r0, r3
 8000468:	3708      	adds	r7, #8
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}
	...

08000470 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000470:	b480      	push	{r7}
 8000472:	b085      	sub	sp, #20
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000478:	2300      	movs	r3, #0
 800047a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	2b00      	cmp	r3, #0
 8000480:	d101      	bne.n	8000486 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000482:	2301      	movs	r3, #1
 8000484:	e043      	b.n	800050e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	461a      	mov	r2, r3
 800048c:	4b22      	ldr	r3, [pc, #136]	; (8000518 <HAL_DMA_Init+0xa8>)
 800048e:	4413      	add	r3, r2
 8000490:	4a22      	ldr	r2, [pc, #136]	; (800051c <HAL_DMA_Init+0xac>)
 8000492:	fba2 2303 	umull	r2, r3, r2, r3
 8000496:	091b      	lsrs	r3, r3, #4
 8000498:	009a      	lsls	r2, r3, #2
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	4a1f      	ldr	r2, [pc, #124]	; (8000520 <HAL_DMA_Init+0xb0>)
 80004a2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	2202      	movs	r2, #2
 80004a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80004b4:	68fb      	ldr	r3, [r7, #12]
 80004b6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80004ba:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80004be:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80004c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	68db      	ldr	r3, [r3, #12]
 80004ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80004d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	695b      	ldr	r3, [r3, #20]
 80004da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80004e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	69db      	ldr	r3, [r3, #28]
 80004e6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80004e8:	68fa      	ldr	r2, [r7, #12]
 80004ea:	4313      	orrs	r3, r2
 80004ec:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	68fa      	ldr	r2, [r7, #12]
 80004f4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	2200      	movs	r2, #0
 80004fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	2201      	movs	r2, #1
 8000500:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	2200      	movs	r2, #0
 8000508:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800050c:	2300      	movs	r3, #0
}
 800050e:	4618      	mov	r0, r3
 8000510:	3714      	adds	r7, #20
 8000512:	46bd      	mov	sp, r7
 8000514:	bc80      	pop	{r7}
 8000516:	4770      	bx	lr
 8000518:	bffdfff8 	.word	0xbffdfff8
 800051c:	cccccccd 	.word	0xcccccccd
 8000520:	40020000 	.word	0x40020000

08000524 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b084      	sub	sp, #16
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000540:	2204      	movs	r2, #4
 8000542:	409a      	lsls	r2, r3
 8000544:	68fb      	ldr	r3, [r7, #12]
 8000546:	4013      	ands	r3, r2
 8000548:	2b00      	cmp	r3, #0
 800054a:	d04f      	beq.n	80005ec <HAL_DMA_IRQHandler+0xc8>
 800054c:	68bb      	ldr	r3, [r7, #8]
 800054e:	f003 0304 	and.w	r3, r3, #4
 8000552:	2b00      	cmp	r3, #0
 8000554:	d04a      	beq.n	80005ec <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	f003 0320 	and.w	r3, r3, #32
 8000560:	2b00      	cmp	r3, #0
 8000562:	d107      	bne.n	8000574 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	681a      	ldr	r2, [r3, #0]
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	f022 0204 	bic.w	r2, r2, #4
 8000572:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a66      	ldr	r2, [pc, #408]	; (8000714 <HAL_DMA_IRQHandler+0x1f0>)
 800057a:	4293      	cmp	r3, r2
 800057c:	d029      	beq.n	80005d2 <HAL_DMA_IRQHandler+0xae>
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	4a65      	ldr	r2, [pc, #404]	; (8000718 <HAL_DMA_IRQHandler+0x1f4>)
 8000584:	4293      	cmp	r3, r2
 8000586:	d022      	beq.n	80005ce <HAL_DMA_IRQHandler+0xaa>
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a63      	ldr	r2, [pc, #396]	; (800071c <HAL_DMA_IRQHandler+0x1f8>)
 800058e:	4293      	cmp	r3, r2
 8000590:	d01a      	beq.n	80005c8 <HAL_DMA_IRQHandler+0xa4>
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	4a62      	ldr	r2, [pc, #392]	; (8000720 <HAL_DMA_IRQHandler+0x1fc>)
 8000598:	4293      	cmp	r3, r2
 800059a:	d012      	beq.n	80005c2 <HAL_DMA_IRQHandler+0x9e>
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a60      	ldr	r2, [pc, #384]	; (8000724 <HAL_DMA_IRQHandler+0x200>)
 80005a2:	4293      	cmp	r3, r2
 80005a4:	d00a      	beq.n	80005bc <HAL_DMA_IRQHandler+0x98>
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	4a5f      	ldr	r2, [pc, #380]	; (8000728 <HAL_DMA_IRQHandler+0x204>)
 80005ac:	4293      	cmp	r3, r2
 80005ae:	d102      	bne.n	80005b6 <HAL_DMA_IRQHandler+0x92>
 80005b0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005b4:	e00e      	b.n	80005d4 <HAL_DMA_IRQHandler+0xb0>
 80005b6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80005ba:	e00b      	b.n	80005d4 <HAL_DMA_IRQHandler+0xb0>
 80005bc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80005c0:	e008      	b.n	80005d4 <HAL_DMA_IRQHandler+0xb0>
 80005c2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80005c6:	e005      	b.n	80005d4 <HAL_DMA_IRQHandler+0xb0>
 80005c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005cc:	e002      	b.n	80005d4 <HAL_DMA_IRQHandler+0xb0>
 80005ce:	2340      	movs	r3, #64	; 0x40
 80005d0:	e000      	b.n	80005d4 <HAL_DMA_IRQHandler+0xb0>
 80005d2:	2304      	movs	r3, #4
 80005d4:	4a55      	ldr	r2, [pc, #340]	; (800072c <HAL_DMA_IRQHandler+0x208>)
 80005d6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005dc:	2b00      	cmp	r3, #0
 80005de:	f000 8094 	beq.w	800070a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005e6:	6878      	ldr	r0, [r7, #4]
 80005e8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80005ea:	e08e      	b.n	800070a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f0:	2202      	movs	r2, #2
 80005f2:	409a      	lsls	r2, r3
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	4013      	ands	r3, r2
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d056      	beq.n	80006aa <HAL_DMA_IRQHandler+0x186>
 80005fc:	68bb      	ldr	r3, [r7, #8]
 80005fe:	f003 0302 	and.w	r3, r3, #2
 8000602:	2b00      	cmp	r3, #0
 8000604:	d051      	beq.n	80006aa <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f003 0320 	and.w	r3, r3, #32
 8000610:	2b00      	cmp	r3, #0
 8000612:	d10b      	bne.n	800062c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	681a      	ldr	r2, [r3, #0]
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	f022 020a 	bic.w	r2, r2, #10
 8000622:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	2201      	movs	r2, #1
 8000628:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a38      	ldr	r2, [pc, #224]	; (8000714 <HAL_DMA_IRQHandler+0x1f0>)
 8000632:	4293      	cmp	r3, r2
 8000634:	d029      	beq.n	800068a <HAL_DMA_IRQHandler+0x166>
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	4a37      	ldr	r2, [pc, #220]	; (8000718 <HAL_DMA_IRQHandler+0x1f4>)
 800063c:	4293      	cmp	r3, r2
 800063e:	d022      	beq.n	8000686 <HAL_DMA_IRQHandler+0x162>
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a35      	ldr	r2, [pc, #212]	; (800071c <HAL_DMA_IRQHandler+0x1f8>)
 8000646:	4293      	cmp	r3, r2
 8000648:	d01a      	beq.n	8000680 <HAL_DMA_IRQHandler+0x15c>
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	4a34      	ldr	r2, [pc, #208]	; (8000720 <HAL_DMA_IRQHandler+0x1fc>)
 8000650:	4293      	cmp	r3, r2
 8000652:	d012      	beq.n	800067a <HAL_DMA_IRQHandler+0x156>
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a32      	ldr	r2, [pc, #200]	; (8000724 <HAL_DMA_IRQHandler+0x200>)
 800065a:	4293      	cmp	r3, r2
 800065c:	d00a      	beq.n	8000674 <HAL_DMA_IRQHandler+0x150>
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	4a31      	ldr	r2, [pc, #196]	; (8000728 <HAL_DMA_IRQHandler+0x204>)
 8000664:	4293      	cmp	r3, r2
 8000666:	d102      	bne.n	800066e <HAL_DMA_IRQHandler+0x14a>
 8000668:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800066c:	e00e      	b.n	800068c <HAL_DMA_IRQHandler+0x168>
 800066e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000672:	e00b      	b.n	800068c <HAL_DMA_IRQHandler+0x168>
 8000674:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000678:	e008      	b.n	800068c <HAL_DMA_IRQHandler+0x168>
 800067a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800067e:	e005      	b.n	800068c <HAL_DMA_IRQHandler+0x168>
 8000680:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000684:	e002      	b.n	800068c <HAL_DMA_IRQHandler+0x168>
 8000686:	2320      	movs	r3, #32
 8000688:	e000      	b.n	800068c <HAL_DMA_IRQHandler+0x168>
 800068a:	2302      	movs	r3, #2
 800068c:	4a27      	ldr	r2, [pc, #156]	; (800072c <HAL_DMA_IRQHandler+0x208>)
 800068e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	2200      	movs	r2, #0
 8000694:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800069c:	2b00      	cmp	r3, #0
 800069e:	d034      	beq.n	800070a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006a4:	6878      	ldr	r0, [r7, #4]
 80006a6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80006a8:	e02f      	b.n	800070a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ae:	2208      	movs	r2, #8
 80006b0:	409a      	lsls	r2, r3
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	4013      	ands	r3, r2
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d028      	beq.n	800070c <HAL_DMA_IRQHandler+0x1e8>
 80006ba:	68bb      	ldr	r3, [r7, #8]
 80006bc:	f003 0308 	and.w	r3, r3, #8
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d023      	beq.n	800070c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	681a      	ldr	r2, [r3, #0]
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	f022 020e 	bic.w	r2, r2, #14
 80006d2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80006dc:	2101      	movs	r1, #1
 80006de:	fa01 f202 	lsl.w	r2, r1, r2
 80006e2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	2201      	movs	r2, #1
 80006e8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	2201      	movs	r2, #1
 80006ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	2200      	movs	r2, #0
 80006f6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d004      	beq.n	800070c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	6878      	ldr	r0, [r7, #4]
 8000708:	4798      	blx	r3
    }
  }
  return;
 800070a:	bf00      	nop
 800070c:	bf00      	nop
}
 800070e:	3710      	adds	r7, #16
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	40020008 	.word	0x40020008
 8000718:	4002001c 	.word	0x4002001c
 800071c:	40020030 	.word	0x40020030
 8000720:	40020044 	.word	0x40020044
 8000724:	40020058 	.word	0x40020058
 8000728:	4002006c 	.word	0x4002006c
 800072c:	40020000 	.word	0x40020000

08000730 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000730:	b480      	push	{r7}
 8000732:	b08b      	sub	sp, #44	; 0x2c
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
 8000738:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800073a:	2300      	movs	r3, #0
 800073c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800073e:	2300      	movs	r3, #0
 8000740:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000742:	e127      	b.n	8000994 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000744:	2201      	movs	r2, #1
 8000746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000748:	fa02 f303 	lsl.w	r3, r2, r3
 800074c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800074e:	683b      	ldr	r3, [r7, #0]
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	69fa      	ldr	r2, [r7, #28]
 8000754:	4013      	ands	r3, r2
 8000756:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000758:	69ba      	ldr	r2, [r7, #24]
 800075a:	69fb      	ldr	r3, [r7, #28]
 800075c:	429a      	cmp	r2, r3
 800075e:	f040 8116 	bne.w	800098e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	685b      	ldr	r3, [r3, #4]
 8000766:	2b12      	cmp	r3, #18
 8000768:	d034      	beq.n	80007d4 <HAL_GPIO_Init+0xa4>
 800076a:	2b12      	cmp	r3, #18
 800076c:	d80d      	bhi.n	800078a <HAL_GPIO_Init+0x5a>
 800076e:	2b02      	cmp	r3, #2
 8000770:	d02b      	beq.n	80007ca <HAL_GPIO_Init+0x9a>
 8000772:	2b02      	cmp	r3, #2
 8000774:	d804      	bhi.n	8000780 <HAL_GPIO_Init+0x50>
 8000776:	2b00      	cmp	r3, #0
 8000778:	d031      	beq.n	80007de <HAL_GPIO_Init+0xae>
 800077a:	2b01      	cmp	r3, #1
 800077c:	d01c      	beq.n	80007b8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800077e:	e048      	b.n	8000812 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000780:	2b03      	cmp	r3, #3
 8000782:	d043      	beq.n	800080c <HAL_GPIO_Init+0xdc>
 8000784:	2b11      	cmp	r3, #17
 8000786:	d01b      	beq.n	80007c0 <HAL_GPIO_Init+0x90>
          break;
 8000788:	e043      	b.n	8000812 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800078a:	4a89      	ldr	r2, [pc, #548]	; (80009b0 <HAL_GPIO_Init+0x280>)
 800078c:	4293      	cmp	r3, r2
 800078e:	d026      	beq.n	80007de <HAL_GPIO_Init+0xae>
 8000790:	4a87      	ldr	r2, [pc, #540]	; (80009b0 <HAL_GPIO_Init+0x280>)
 8000792:	4293      	cmp	r3, r2
 8000794:	d806      	bhi.n	80007a4 <HAL_GPIO_Init+0x74>
 8000796:	4a87      	ldr	r2, [pc, #540]	; (80009b4 <HAL_GPIO_Init+0x284>)
 8000798:	4293      	cmp	r3, r2
 800079a:	d020      	beq.n	80007de <HAL_GPIO_Init+0xae>
 800079c:	4a86      	ldr	r2, [pc, #536]	; (80009b8 <HAL_GPIO_Init+0x288>)
 800079e:	4293      	cmp	r3, r2
 80007a0:	d01d      	beq.n	80007de <HAL_GPIO_Init+0xae>
          break;
 80007a2:	e036      	b.n	8000812 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80007a4:	4a85      	ldr	r2, [pc, #532]	; (80009bc <HAL_GPIO_Init+0x28c>)
 80007a6:	4293      	cmp	r3, r2
 80007a8:	d019      	beq.n	80007de <HAL_GPIO_Init+0xae>
 80007aa:	4a85      	ldr	r2, [pc, #532]	; (80009c0 <HAL_GPIO_Init+0x290>)
 80007ac:	4293      	cmp	r3, r2
 80007ae:	d016      	beq.n	80007de <HAL_GPIO_Init+0xae>
 80007b0:	4a84      	ldr	r2, [pc, #528]	; (80009c4 <HAL_GPIO_Init+0x294>)
 80007b2:	4293      	cmp	r3, r2
 80007b4:	d013      	beq.n	80007de <HAL_GPIO_Init+0xae>
          break;
 80007b6:	e02c      	b.n	8000812 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	68db      	ldr	r3, [r3, #12]
 80007bc:	623b      	str	r3, [r7, #32]
          break;
 80007be:	e028      	b.n	8000812 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	68db      	ldr	r3, [r3, #12]
 80007c4:	3304      	adds	r3, #4
 80007c6:	623b      	str	r3, [r7, #32]
          break;
 80007c8:	e023      	b.n	8000812 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	68db      	ldr	r3, [r3, #12]
 80007ce:	3308      	adds	r3, #8
 80007d0:	623b      	str	r3, [r7, #32]
          break;
 80007d2:	e01e      	b.n	8000812 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80007d4:	683b      	ldr	r3, [r7, #0]
 80007d6:	68db      	ldr	r3, [r3, #12]
 80007d8:	330c      	adds	r3, #12
 80007da:	623b      	str	r3, [r7, #32]
          break;
 80007dc:	e019      	b.n	8000812 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80007de:	683b      	ldr	r3, [r7, #0]
 80007e0:	689b      	ldr	r3, [r3, #8]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d102      	bne.n	80007ec <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80007e6:	2304      	movs	r3, #4
 80007e8:	623b      	str	r3, [r7, #32]
          break;
 80007ea:	e012      	b.n	8000812 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	689b      	ldr	r3, [r3, #8]
 80007f0:	2b01      	cmp	r3, #1
 80007f2:	d105      	bne.n	8000800 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80007f4:	2308      	movs	r3, #8
 80007f6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	69fa      	ldr	r2, [r7, #28]
 80007fc:	611a      	str	r2, [r3, #16]
          break;
 80007fe:	e008      	b.n	8000812 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000800:	2308      	movs	r3, #8
 8000802:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	69fa      	ldr	r2, [r7, #28]
 8000808:	615a      	str	r2, [r3, #20]
          break;
 800080a:	e002      	b.n	8000812 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800080c:	2300      	movs	r3, #0
 800080e:	623b      	str	r3, [r7, #32]
          break;
 8000810:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000812:	69bb      	ldr	r3, [r7, #24]
 8000814:	2bff      	cmp	r3, #255	; 0xff
 8000816:	d801      	bhi.n	800081c <HAL_GPIO_Init+0xec>
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	e001      	b.n	8000820 <HAL_GPIO_Init+0xf0>
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	3304      	adds	r3, #4
 8000820:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000822:	69bb      	ldr	r3, [r7, #24]
 8000824:	2bff      	cmp	r3, #255	; 0xff
 8000826:	d802      	bhi.n	800082e <HAL_GPIO_Init+0xfe>
 8000828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800082a:	009b      	lsls	r3, r3, #2
 800082c:	e002      	b.n	8000834 <HAL_GPIO_Init+0x104>
 800082e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000830:	3b08      	subs	r3, #8
 8000832:	009b      	lsls	r3, r3, #2
 8000834:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000836:	697b      	ldr	r3, [r7, #20]
 8000838:	681a      	ldr	r2, [r3, #0]
 800083a:	210f      	movs	r1, #15
 800083c:	693b      	ldr	r3, [r7, #16]
 800083e:	fa01 f303 	lsl.w	r3, r1, r3
 8000842:	43db      	mvns	r3, r3
 8000844:	401a      	ands	r2, r3
 8000846:	6a39      	ldr	r1, [r7, #32]
 8000848:	693b      	ldr	r3, [r7, #16]
 800084a:	fa01 f303 	lsl.w	r3, r1, r3
 800084e:	431a      	orrs	r2, r3
 8000850:	697b      	ldr	r3, [r7, #20]
 8000852:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	685b      	ldr	r3, [r3, #4]
 8000858:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800085c:	2b00      	cmp	r3, #0
 800085e:	f000 8096 	beq.w	800098e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000862:	4b59      	ldr	r3, [pc, #356]	; (80009c8 <HAL_GPIO_Init+0x298>)
 8000864:	699b      	ldr	r3, [r3, #24]
 8000866:	4a58      	ldr	r2, [pc, #352]	; (80009c8 <HAL_GPIO_Init+0x298>)
 8000868:	f043 0301 	orr.w	r3, r3, #1
 800086c:	6193      	str	r3, [r2, #24]
 800086e:	4b56      	ldr	r3, [pc, #344]	; (80009c8 <HAL_GPIO_Init+0x298>)
 8000870:	699b      	ldr	r3, [r3, #24]
 8000872:	f003 0301 	and.w	r3, r3, #1
 8000876:	60bb      	str	r3, [r7, #8]
 8000878:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800087a:	4a54      	ldr	r2, [pc, #336]	; (80009cc <HAL_GPIO_Init+0x29c>)
 800087c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800087e:	089b      	lsrs	r3, r3, #2
 8000880:	3302      	adds	r3, #2
 8000882:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000886:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800088a:	f003 0303 	and.w	r3, r3, #3
 800088e:	009b      	lsls	r3, r3, #2
 8000890:	220f      	movs	r2, #15
 8000892:	fa02 f303 	lsl.w	r3, r2, r3
 8000896:	43db      	mvns	r3, r3
 8000898:	68fa      	ldr	r2, [r7, #12]
 800089a:	4013      	ands	r3, r2
 800089c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	4a4b      	ldr	r2, [pc, #300]	; (80009d0 <HAL_GPIO_Init+0x2a0>)
 80008a2:	4293      	cmp	r3, r2
 80008a4:	d013      	beq.n	80008ce <HAL_GPIO_Init+0x19e>
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	4a4a      	ldr	r2, [pc, #296]	; (80009d4 <HAL_GPIO_Init+0x2a4>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d00d      	beq.n	80008ca <HAL_GPIO_Init+0x19a>
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	4a49      	ldr	r2, [pc, #292]	; (80009d8 <HAL_GPIO_Init+0x2a8>)
 80008b2:	4293      	cmp	r3, r2
 80008b4:	d007      	beq.n	80008c6 <HAL_GPIO_Init+0x196>
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	4a48      	ldr	r2, [pc, #288]	; (80009dc <HAL_GPIO_Init+0x2ac>)
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d101      	bne.n	80008c2 <HAL_GPIO_Init+0x192>
 80008be:	2303      	movs	r3, #3
 80008c0:	e006      	b.n	80008d0 <HAL_GPIO_Init+0x1a0>
 80008c2:	2304      	movs	r3, #4
 80008c4:	e004      	b.n	80008d0 <HAL_GPIO_Init+0x1a0>
 80008c6:	2302      	movs	r3, #2
 80008c8:	e002      	b.n	80008d0 <HAL_GPIO_Init+0x1a0>
 80008ca:	2301      	movs	r3, #1
 80008cc:	e000      	b.n	80008d0 <HAL_GPIO_Init+0x1a0>
 80008ce:	2300      	movs	r3, #0
 80008d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80008d2:	f002 0203 	and.w	r2, r2, #3
 80008d6:	0092      	lsls	r2, r2, #2
 80008d8:	4093      	lsls	r3, r2
 80008da:	68fa      	ldr	r2, [r7, #12]
 80008dc:	4313      	orrs	r3, r2
 80008de:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80008e0:	493a      	ldr	r1, [pc, #232]	; (80009cc <HAL_GPIO_Init+0x29c>)
 80008e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008e4:	089b      	lsrs	r3, r3, #2
 80008e6:	3302      	adds	r3, #2
 80008e8:	68fa      	ldr	r2, [r7, #12]
 80008ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	685b      	ldr	r3, [r3, #4]
 80008f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d006      	beq.n	8000908 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80008fa:	4b39      	ldr	r3, [pc, #228]	; (80009e0 <HAL_GPIO_Init+0x2b0>)
 80008fc:	681a      	ldr	r2, [r3, #0]
 80008fe:	4938      	ldr	r1, [pc, #224]	; (80009e0 <HAL_GPIO_Init+0x2b0>)
 8000900:	69bb      	ldr	r3, [r7, #24]
 8000902:	4313      	orrs	r3, r2
 8000904:	600b      	str	r3, [r1, #0]
 8000906:	e006      	b.n	8000916 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000908:	4b35      	ldr	r3, [pc, #212]	; (80009e0 <HAL_GPIO_Init+0x2b0>)
 800090a:	681a      	ldr	r2, [r3, #0]
 800090c:	69bb      	ldr	r3, [r7, #24]
 800090e:	43db      	mvns	r3, r3
 8000910:	4933      	ldr	r1, [pc, #204]	; (80009e0 <HAL_GPIO_Init+0x2b0>)
 8000912:	4013      	ands	r3, r2
 8000914:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	685b      	ldr	r3, [r3, #4]
 800091a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800091e:	2b00      	cmp	r3, #0
 8000920:	d006      	beq.n	8000930 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000922:	4b2f      	ldr	r3, [pc, #188]	; (80009e0 <HAL_GPIO_Init+0x2b0>)
 8000924:	685a      	ldr	r2, [r3, #4]
 8000926:	492e      	ldr	r1, [pc, #184]	; (80009e0 <HAL_GPIO_Init+0x2b0>)
 8000928:	69bb      	ldr	r3, [r7, #24]
 800092a:	4313      	orrs	r3, r2
 800092c:	604b      	str	r3, [r1, #4]
 800092e:	e006      	b.n	800093e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000930:	4b2b      	ldr	r3, [pc, #172]	; (80009e0 <HAL_GPIO_Init+0x2b0>)
 8000932:	685a      	ldr	r2, [r3, #4]
 8000934:	69bb      	ldr	r3, [r7, #24]
 8000936:	43db      	mvns	r3, r3
 8000938:	4929      	ldr	r1, [pc, #164]	; (80009e0 <HAL_GPIO_Init+0x2b0>)
 800093a:	4013      	ands	r3, r2
 800093c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	685b      	ldr	r3, [r3, #4]
 8000942:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000946:	2b00      	cmp	r3, #0
 8000948:	d006      	beq.n	8000958 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800094a:	4b25      	ldr	r3, [pc, #148]	; (80009e0 <HAL_GPIO_Init+0x2b0>)
 800094c:	689a      	ldr	r2, [r3, #8]
 800094e:	4924      	ldr	r1, [pc, #144]	; (80009e0 <HAL_GPIO_Init+0x2b0>)
 8000950:	69bb      	ldr	r3, [r7, #24]
 8000952:	4313      	orrs	r3, r2
 8000954:	608b      	str	r3, [r1, #8]
 8000956:	e006      	b.n	8000966 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000958:	4b21      	ldr	r3, [pc, #132]	; (80009e0 <HAL_GPIO_Init+0x2b0>)
 800095a:	689a      	ldr	r2, [r3, #8]
 800095c:	69bb      	ldr	r3, [r7, #24]
 800095e:	43db      	mvns	r3, r3
 8000960:	491f      	ldr	r1, [pc, #124]	; (80009e0 <HAL_GPIO_Init+0x2b0>)
 8000962:	4013      	ands	r3, r2
 8000964:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	685b      	ldr	r3, [r3, #4]
 800096a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800096e:	2b00      	cmp	r3, #0
 8000970:	d006      	beq.n	8000980 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000972:	4b1b      	ldr	r3, [pc, #108]	; (80009e0 <HAL_GPIO_Init+0x2b0>)
 8000974:	68da      	ldr	r2, [r3, #12]
 8000976:	491a      	ldr	r1, [pc, #104]	; (80009e0 <HAL_GPIO_Init+0x2b0>)
 8000978:	69bb      	ldr	r3, [r7, #24]
 800097a:	4313      	orrs	r3, r2
 800097c:	60cb      	str	r3, [r1, #12]
 800097e:	e006      	b.n	800098e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000980:	4b17      	ldr	r3, [pc, #92]	; (80009e0 <HAL_GPIO_Init+0x2b0>)
 8000982:	68da      	ldr	r2, [r3, #12]
 8000984:	69bb      	ldr	r3, [r7, #24]
 8000986:	43db      	mvns	r3, r3
 8000988:	4915      	ldr	r1, [pc, #84]	; (80009e0 <HAL_GPIO_Init+0x2b0>)
 800098a:	4013      	ands	r3, r2
 800098c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800098e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000990:	3301      	adds	r3, #1
 8000992:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	681a      	ldr	r2, [r3, #0]
 8000998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800099a:	fa22 f303 	lsr.w	r3, r2, r3
 800099e:	2b00      	cmp	r3, #0
 80009a0:	f47f aed0 	bne.w	8000744 <HAL_GPIO_Init+0x14>
  }
}
 80009a4:	bf00      	nop
 80009a6:	372c      	adds	r7, #44	; 0x2c
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bc80      	pop	{r7}
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	10210000 	.word	0x10210000
 80009b4:	10110000 	.word	0x10110000
 80009b8:	10120000 	.word	0x10120000
 80009bc:	10310000 	.word	0x10310000
 80009c0:	10320000 	.word	0x10320000
 80009c4:	10220000 	.word	0x10220000
 80009c8:	40021000 	.word	0x40021000
 80009cc:	40010000 	.word	0x40010000
 80009d0:	40010800 	.word	0x40010800
 80009d4:	40010c00 	.word	0x40010c00
 80009d8:	40011000 	.word	0x40011000
 80009dc:	40011400 	.word	0x40011400
 80009e0:	40010400 	.word	0x40010400

080009e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
 80009ec:	460b      	mov	r3, r1
 80009ee:	807b      	strh	r3, [r7, #2]
 80009f0:	4613      	mov	r3, r2
 80009f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80009f4:	787b      	ldrb	r3, [r7, #1]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d003      	beq.n	8000a02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80009fa:	887a      	ldrh	r2, [r7, #2]
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000a00:	e003      	b.n	8000a0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a02:	887b      	ldrh	r3, [r7, #2]
 8000a04:	041a      	lsls	r2, r3, #16
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	611a      	str	r2, [r3, #16]
}
 8000a0a:	bf00      	nop
 8000a0c:	370c      	adds	r7, #12
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bc80      	pop	{r7}
 8000a12:	4770      	bx	lr

08000a14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b086      	sub	sp, #24
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d101      	bne.n	8000a26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000a22:	2301      	movs	r3, #1
 8000a24:	e26c      	b.n	8000f00 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	f003 0301 	and.w	r3, r3, #1
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	f000 8087 	beq.w	8000b42 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000a34:	4b92      	ldr	r3, [pc, #584]	; (8000c80 <HAL_RCC_OscConfig+0x26c>)
 8000a36:	685b      	ldr	r3, [r3, #4]
 8000a38:	f003 030c 	and.w	r3, r3, #12
 8000a3c:	2b04      	cmp	r3, #4
 8000a3e:	d00c      	beq.n	8000a5a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000a40:	4b8f      	ldr	r3, [pc, #572]	; (8000c80 <HAL_RCC_OscConfig+0x26c>)
 8000a42:	685b      	ldr	r3, [r3, #4]
 8000a44:	f003 030c 	and.w	r3, r3, #12
 8000a48:	2b08      	cmp	r3, #8
 8000a4a:	d112      	bne.n	8000a72 <HAL_RCC_OscConfig+0x5e>
 8000a4c:	4b8c      	ldr	r3, [pc, #560]	; (8000c80 <HAL_RCC_OscConfig+0x26c>)
 8000a4e:	685b      	ldr	r3, [r3, #4]
 8000a50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a58:	d10b      	bne.n	8000a72 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a5a:	4b89      	ldr	r3, [pc, #548]	; (8000c80 <HAL_RCC_OscConfig+0x26c>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d06c      	beq.n	8000b40 <HAL_RCC_OscConfig+0x12c>
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	685b      	ldr	r3, [r3, #4]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d168      	bne.n	8000b40 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	e246      	b.n	8000f00 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	685b      	ldr	r3, [r3, #4]
 8000a76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a7a:	d106      	bne.n	8000a8a <HAL_RCC_OscConfig+0x76>
 8000a7c:	4b80      	ldr	r3, [pc, #512]	; (8000c80 <HAL_RCC_OscConfig+0x26c>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a7f      	ldr	r2, [pc, #508]	; (8000c80 <HAL_RCC_OscConfig+0x26c>)
 8000a82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a86:	6013      	str	r3, [r2, #0]
 8000a88:	e02e      	b.n	8000ae8 <HAL_RCC_OscConfig+0xd4>
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	685b      	ldr	r3, [r3, #4]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d10c      	bne.n	8000aac <HAL_RCC_OscConfig+0x98>
 8000a92:	4b7b      	ldr	r3, [pc, #492]	; (8000c80 <HAL_RCC_OscConfig+0x26c>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a7a      	ldr	r2, [pc, #488]	; (8000c80 <HAL_RCC_OscConfig+0x26c>)
 8000a98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a9c:	6013      	str	r3, [r2, #0]
 8000a9e:	4b78      	ldr	r3, [pc, #480]	; (8000c80 <HAL_RCC_OscConfig+0x26c>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4a77      	ldr	r2, [pc, #476]	; (8000c80 <HAL_RCC_OscConfig+0x26c>)
 8000aa4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000aa8:	6013      	str	r3, [r2, #0]
 8000aaa:	e01d      	b.n	8000ae8 <HAL_RCC_OscConfig+0xd4>
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	685b      	ldr	r3, [r3, #4]
 8000ab0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ab4:	d10c      	bne.n	8000ad0 <HAL_RCC_OscConfig+0xbc>
 8000ab6:	4b72      	ldr	r3, [pc, #456]	; (8000c80 <HAL_RCC_OscConfig+0x26c>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	4a71      	ldr	r2, [pc, #452]	; (8000c80 <HAL_RCC_OscConfig+0x26c>)
 8000abc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ac0:	6013      	str	r3, [r2, #0]
 8000ac2:	4b6f      	ldr	r3, [pc, #444]	; (8000c80 <HAL_RCC_OscConfig+0x26c>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	4a6e      	ldr	r2, [pc, #440]	; (8000c80 <HAL_RCC_OscConfig+0x26c>)
 8000ac8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000acc:	6013      	str	r3, [r2, #0]
 8000ace:	e00b      	b.n	8000ae8 <HAL_RCC_OscConfig+0xd4>
 8000ad0:	4b6b      	ldr	r3, [pc, #428]	; (8000c80 <HAL_RCC_OscConfig+0x26c>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a6a      	ldr	r2, [pc, #424]	; (8000c80 <HAL_RCC_OscConfig+0x26c>)
 8000ad6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ada:	6013      	str	r3, [r2, #0]
 8000adc:	4b68      	ldr	r3, [pc, #416]	; (8000c80 <HAL_RCC_OscConfig+0x26c>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a67      	ldr	r2, [pc, #412]	; (8000c80 <HAL_RCC_OscConfig+0x26c>)
 8000ae2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ae6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d013      	beq.n	8000b18 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000af0:	f7ff fb84 	bl	80001fc <HAL_GetTick>
 8000af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000af6:	e008      	b.n	8000b0a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000af8:	f7ff fb80 	bl	80001fc <HAL_GetTick>
 8000afc:	4602      	mov	r2, r0
 8000afe:	693b      	ldr	r3, [r7, #16]
 8000b00:	1ad3      	subs	r3, r2, r3
 8000b02:	2b64      	cmp	r3, #100	; 0x64
 8000b04:	d901      	bls.n	8000b0a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000b06:	2303      	movs	r3, #3
 8000b08:	e1fa      	b.n	8000f00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b0a:	4b5d      	ldr	r3, [pc, #372]	; (8000c80 <HAL_RCC_OscConfig+0x26c>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d0f0      	beq.n	8000af8 <HAL_RCC_OscConfig+0xe4>
 8000b16:	e014      	b.n	8000b42 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b18:	f7ff fb70 	bl	80001fc <HAL_GetTick>
 8000b1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b1e:	e008      	b.n	8000b32 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000b20:	f7ff fb6c 	bl	80001fc <HAL_GetTick>
 8000b24:	4602      	mov	r2, r0
 8000b26:	693b      	ldr	r3, [r7, #16]
 8000b28:	1ad3      	subs	r3, r2, r3
 8000b2a:	2b64      	cmp	r3, #100	; 0x64
 8000b2c:	d901      	bls.n	8000b32 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000b2e:	2303      	movs	r3, #3
 8000b30:	e1e6      	b.n	8000f00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b32:	4b53      	ldr	r3, [pc, #332]	; (8000c80 <HAL_RCC_OscConfig+0x26c>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d1f0      	bne.n	8000b20 <HAL_RCC_OscConfig+0x10c>
 8000b3e:	e000      	b.n	8000b42 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	f003 0302 	and.w	r3, r3, #2
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d063      	beq.n	8000c16 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000b4e:	4b4c      	ldr	r3, [pc, #304]	; (8000c80 <HAL_RCC_OscConfig+0x26c>)
 8000b50:	685b      	ldr	r3, [r3, #4]
 8000b52:	f003 030c 	and.w	r3, r3, #12
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d00b      	beq.n	8000b72 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000b5a:	4b49      	ldr	r3, [pc, #292]	; (8000c80 <HAL_RCC_OscConfig+0x26c>)
 8000b5c:	685b      	ldr	r3, [r3, #4]
 8000b5e:	f003 030c 	and.w	r3, r3, #12
 8000b62:	2b08      	cmp	r3, #8
 8000b64:	d11c      	bne.n	8000ba0 <HAL_RCC_OscConfig+0x18c>
 8000b66:	4b46      	ldr	r3, [pc, #280]	; (8000c80 <HAL_RCC_OscConfig+0x26c>)
 8000b68:	685b      	ldr	r3, [r3, #4]
 8000b6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d116      	bne.n	8000ba0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b72:	4b43      	ldr	r3, [pc, #268]	; (8000c80 <HAL_RCC_OscConfig+0x26c>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	f003 0302 	and.w	r3, r3, #2
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d005      	beq.n	8000b8a <HAL_RCC_OscConfig+0x176>
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	691b      	ldr	r3, [r3, #16]
 8000b82:	2b01      	cmp	r3, #1
 8000b84:	d001      	beq.n	8000b8a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000b86:	2301      	movs	r3, #1
 8000b88:	e1ba      	b.n	8000f00 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b8a:	4b3d      	ldr	r3, [pc, #244]	; (8000c80 <HAL_RCC_OscConfig+0x26c>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	695b      	ldr	r3, [r3, #20]
 8000b96:	00db      	lsls	r3, r3, #3
 8000b98:	4939      	ldr	r1, [pc, #228]	; (8000c80 <HAL_RCC_OscConfig+0x26c>)
 8000b9a:	4313      	orrs	r3, r2
 8000b9c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b9e:	e03a      	b.n	8000c16 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	691b      	ldr	r3, [r3, #16]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d020      	beq.n	8000bea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ba8:	4b36      	ldr	r3, [pc, #216]	; (8000c84 <HAL_RCC_OscConfig+0x270>)
 8000baa:	2201      	movs	r2, #1
 8000bac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bae:	f7ff fb25 	bl	80001fc <HAL_GetTick>
 8000bb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bb4:	e008      	b.n	8000bc8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000bb6:	f7ff fb21 	bl	80001fc <HAL_GetTick>
 8000bba:	4602      	mov	r2, r0
 8000bbc:	693b      	ldr	r3, [r7, #16]
 8000bbe:	1ad3      	subs	r3, r2, r3
 8000bc0:	2b02      	cmp	r3, #2
 8000bc2:	d901      	bls.n	8000bc8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000bc4:	2303      	movs	r3, #3
 8000bc6:	e19b      	b.n	8000f00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bc8:	4b2d      	ldr	r3, [pc, #180]	; (8000c80 <HAL_RCC_OscConfig+0x26c>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f003 0302 	and.w	r3, r3, #2
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d0f0      	beq.n	8000bb6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000bd4:	4b2a      	ldr	r3, [pc, #168]	; (8000c80 <HAL_RCC_OscConfig+0x26c>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	695b      	ldr	r3, [r3, #20]
 8000be0:	00db      	lsls	r3, r3, #3
 8000be2:	4927      	ldr	r1, [pc, #156]	; (8000c80 <HAL_RCC_OscConfig+0x26c>)
 8000be4:	4313      	orrs	r3, r2
 8000be6:	600b      	str	r3, [r1, #0]
 8000be8:	e015      	b.n	8000c16 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000bea:	4b26      	ldr	r3, [pc, #152]	; (8000c84 <HAL_RCC_OscConfig+0x270>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bf0:	f7ff fb04 	bl	80001fc <HAL_GetTick>
 8000bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000bf6:	e008      	b.n	8000c0a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000bf8:	f7ff fb00 	bl	80001fc <HAL_GetTick>
 8000bfc:	4602      	mov	r2, r0
 8000bfe:	693b      	ldr	r3, [r7, #16]
 8000c00:	1ad3      	subs	r3, r2, r3
 8000c02:	2b02      	cmp	r3, #2
 8000c04:	d901      	bls.n	8000c0a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000c06:	2303      	movs	r3, #3
 8000c08:	e17a      	b.n	8000f00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c0a:	4b1d      	ldr	r3, [pc, #116]	; (8000c80 <HAL_RCC_OscConfig+0x26c>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f003 0302 	and.w	r3, r3, #2
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d1f0      	bne.n	8000bf8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	f003 0308 	and.w	r3, r3, #8
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d03a      	beq.n	8000c98 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	699b      	ldr	r3, [r3, #24]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d019      	beq.n	8000c5e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000c2a:	4b17      	ldr	r3, [pc, #92]	; (8000c88 <HAL_RCC_OscConfig+0x274>)
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c30:	f7ff fae4 	bl	80001fc <HAL_GetTick>
 8000c34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c36:	e008      	b.n	8000c4a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000c38:	f7ff fae0 	bl	80001fc <HAL_GetTick>
 8000c3c:	4602      	mov	r2, r0
 8000c3e:	693b      	ldr	r3, [r7, #16]
 8000c40:	1ad3      	subs	r3, r2, r3
 8000c42:	2b02      	cmp	r3, #2
 8000c44:	d901      	bls.n	8000c4a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000c46:	2303      	movs	r3, #3
 8000c48:	e15a      	b.n	8000f00 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c4a:	4b0d      	ldr	r3, [pc, #52]	; (8000c80 <HAL_RCC_OscConfig+0x26c>)
 8000c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c4e:	f003 0302 	and.w	r3, r3, #2
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d0f0      	beq.n	8000c38 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000c56:	2001      	movs	r0, #1
 8000c58:	f000 fada 	bl	8001210 <RCC_Delay>
 8000c5c:	e01c      	b.n	8000c98 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000c5e:	4b0a      	ldr	r3, [pc, #40]	; (8000c88 <HAL_RCC_OscConfig+0x274>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c64:	f7ff faca 	bl	80001fc <HAL_GetTick>
 8000c68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c6a:	e00f      	b.n	8000c8c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000c6c:	f7ff fac6 	bl	80001fc <HAL_GetTick>
 8000c70:	4602      	mov	r2, r0
 8000c72:	693b      	ldr	r3, [r7, #16]
 8000c74:	1ad3      	subs	r3, r2, r3
 8000c76:	2b02      	cmp	r3, #2
 8000c78:	d908      	bls.n	8000c8c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000c7a:	2303      	movs	r3, #3
 8000c7c:	e140      	b.n	8000f00 <HAL_RCC_OscConfig+0x4ec>
 8000c7e:	bf00      	nop
 8000c80:	40021000 	.word	0x40021000
 8000c84:	42420000 	.word	0x42420000
 8000c88:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c8c:	4b9e      	ldr	r3, [pc, #632]	; (8000f08 <HAL_RCC_OscConfig+0x4f4>)
 8000c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c90:	f003 0302 	and.w	r3, r3, #2
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d1e9      	bne.n	8000c6c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f003 0304 	and.w	r3, r3, #4
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	f000 80a6 	beq.w	8000df2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000caa:	4b97      	ldr	r3, [pc, #604]	; (8000f08 <HAL_RCC_OscConfig+0x4f4>)
 8000cac:	69db      	ldr	r3, [r3, #28]
 8000cae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d10d      	bne.n	8000cd2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000cb6:	4b94      	ldr	r3, [pc, #592]	; (8000f08 <HAL_RCC_OscConfig+0x4f4>)
 8000cb8:	69db      	ldr	r3, [r3, #28]
 8000cba:	4a93      	ldr	r2, [pc, #588]	; (8000f08 <HAL_RCC_OscConfig+0x4f4>)
 8000cbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cc0:	61d3      	str	r3, [r2, #28]
 8000cc2:	4b91      	ldr	r3, [pc, #580]	; (8000f08 <HAL_RCC_OscConfig+0x4f4>)
 8000cc4:	69db      	ldr	r3, [r3, #28]
 8000cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cca:	60bb      	str	r3, [r7, #8]
 8000ccc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000cd2:	4b8e      	ldr	r3, [pc, #568]	; (8000f0c <HAL_RCC_OscConfig+0x4f8>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d118      	bne.n	8000d10 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000cde:	4b8b      	ldr	r3, [pc, #556]	; (8000f0c <HAL_RCC_OscConfig+0x4f8>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4a8a      	ldr	r2, [pc, #552]	; (8000f0c <HAL_RCC_OscConfig+0x4f8>)
 8000ce4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ce8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000cea:	f7ff fa87 	bl	80001fc <HAL_GetTick>
 8000cee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000cf0:	e008      	b.n	8000d04 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000cf2:	f7ff fa83 	bl	80001fc <HAL_GetTick>
 8000cf6:	4602      	mov	r2, r0
 8000cf8:	693b      	ldr	r3, [r7, #16]
 8000cfa:	1ad3      	subs	r3, r2, r3
 8000cfc:	2b64      	cmp	r3, #100	; 0x64
 8000cfe:	d901      	bls.n	8000d04 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000d00:	2303      	movs	r3, #3
 8000d02:	e0fd      	b.n	8000f00 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d04:	4b81      	ldr	r3, [pc, #516]	; (8000f0c <HAL_RCC_OscConfig+0x4f8>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d0f0      	beq.n	8000cf2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	68db      	ldr	r3, [r3, #12]
 8000d14:	2b01      	cmp	r3, #1
 8000d16:	d106      	bne.n	8000d26 <HAL_RCC_OscConfig+0x312>
 8000d18:	4b7b      	ldr	r3, [pc, #492]	; (8000f08 <HAL_RCC_OscConfig+0x4f4>)
 8000d1a:	6a1b      	ldr	r3, [r3, #32]
 8000d1c:	4a7a      	ldr	r2, [pc, #488]	; (8000f08 <HAL_RCC_OscConfig+0x4f4>)
 8000d1e:	f043 0301 	orr.w	r3, r3, #1
 8000d22:	6213      	str	r3, [r2, #32]
 8000d24:	e02d      	b.n	8000d82 <HAL_RCC_OscConfig+0x36e>
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	68db      	ldr	r3, [r3, #12]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d10c      	bne.n	8000d48 <HAL_RCC_OscConfig+0x334>
 8000d2e:	4b76      	ldr	r3, [pc, #472]	; (8000f08 <HAL_RCC_OscConfig+0x4f4>)
 8000d30:	6a1b      	ldr	r3, [r3, #32]
 8000d32:	4a75      	ldr	r2, [pc, #468]	; (8000f08 <HAL_RCC_OscConfig+0x4f4>)
 8000d34:	f023 0301 	bic.w	r3, r3, #1
 8000d38:	6213      	str	r3, [r2, #32]
 8000d3a:	4b73      	ldr	r3, [pc, #460]	; (8000f08 <HAL_RCC_OscConfig+0x4f4>)
 8000d3c:	6a1b      	ldr	r3, [r3, #32]
 8000d3e:	4a72      	ldr	r2, [pc, #456]	; (8000f08 <HAL_RCC_OscConfig+0x4f4>)
 8000d40:	f023 0304 	bic.w	r3, r3, #4
 8000d44:	6213      	str	r3, [r2, #32]
 8000d46:	e01c      	b.n	8000d82 <HAL_RCC_OscConfig+0x36e>
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	68db      	ldr	r3, [r3, #12]
 8000d4c:	2b05      	cmp	r3, #5
 8000d4e:	d10c      	bne.n	8000d6a <HAL_RCC_OscConfig+0x356>
 8000d50:	4b6d      	ldr	r3, [pc, #436]	; (8000f08 <HAL_RCC_OscConfig+0x4f4>)
 8000d52:	6a1b      	ldr	r3, [r3, #32]
 8000d54:	4a6c      	ldr	r2, [pc, #432]	; (8000f08 <HAL_RCC_OscConfig+0x4f4>)
 8000d56:	f043 0304 	orr.w	r3, r3, #4
 8000d5a:	6213      	str	r3, [r2, #32]
 8000d5c:	4b6a      	ldr	r3, [pc, #424]	; (8000f08 <HAL_RCC_OscConfig+0x4f4>)
 8000d5e:	6a1b      	ldr	r3, [r3, #32]
 8000d60:	4a69      	ldr	r2, [pc, #420]	; (8000f08 <HAL_RCC_OscConfig+0x4f4>)
 8000d62:	f043 0301 	orr.w	r3, r3, #1
 8000d66:	6213      	str	r3, [r2, #32]
 8000d68:	e00b      	b.n	8000d82 <HAL_RCC_OscConfig+0x36e>
 8000d6a:	4b67      	ldr	r3, [pc, #412]	; (8000f08 <HAL_RCC_OscConfig+0x4f4>)
 8000d6c:	6a1b      	ldr	r3, [r3, #32]
 8000d6e:	4a66      	ldr	r2, [pc, #408]	; (8000f08 <HAL_RCC_OscConfig+0x4f4>)
 8000d70:	f023 0301 	bic.w	r3, r3, #1
 8000d74:	6213      	str	r3, [r2, #32]
 8000d76:	4b64      	ldr	r3, [pc, #400]	; (8000f08 <HAL_RCC_OscConfig+0x4f4>)
 8000d78:	6a1b      	ldr	r3, [r3, #32]
 8000d7a:	4a63      	ldr	r2, [pc, #396]	; (8000f08 <HAL_RCC_OscConfig+0x4f4>)
 8000d7c:	f023 0304 	bic.w	r3, r3, #4
 8000d80:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	68db      	ldr	r3, [r3, #12]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d015      	beq.n	8000db6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d8a:	f7ff fa37 	bl	80001fc <HAL_GetTick>
 8000d8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d90:	e00a      	b.n	8000da8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d92:	f7ff fa33 	bl	80001fc <HAL_GetTick>
 8000d96:	4602      	mov	r2, r0
 8000d98:	693b      	ldr	r3, [r7, #16]
 8000d9a:	1ad3      	subs	r3, r2, r3
 8000d9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000da0:	4293      	cmp	r3, r2
 8000da2:	d901      	bls.n	8000da8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000da4:	2303      	movs	r3, #3
 8000da6:	e0ab      	b.n	8000f00 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000da8:	4b57      	ldr	r3, [pc, #348]	; (8000f08 <HAL_RCC_OscConfig+0x4f4>)
 8000daa:	6a1b      	ldr	r3, [r3, #32]
 8000dac:	f003 0302 	and.w	r3, r3, #2
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d0ee      	beq.n	8000d92 <HAL_RCC_OscConfig+0x37e>
 8000db4:	e014      	b.n	8000de0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000db6:	f7ff fa21 	bl	80001fc <HAL_GetTick>
 8000dba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000dbc:	e00a      	b.n	8000dd4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000dbe:	f7ff fa1d 	bl	80001fc <HAL_GetTick>
 8000dc2:	4602      	mov	r2, r0
 8000dc4:	693b      	ldr	r3, [r7, #16]
 8000dc6:	1ad3      	subs	r3, r2, r3
 8000dc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d901      	bls.n	8000dd4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000dd0:	2303      	movs	r3, #3
 8000dd2:	e095      	b.n	8000f00 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000dd4:	4b4c      	ldr	r3, [pc, #304]	; (8000f08 <HAL_RCC_OscConfig+0x4f4>)
 8000dd6:	6a1b      	ldr	r3, [r3, #32]
 8000dd8:	f003 0302 	and.w	r3, r3, #2
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d1ee      	bne.n	8000dbe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000de0:	7dfb      	ldrb	r3, [r7, #23]
 8000de2:	2b01      	cmp	r3, #1
 8000de4:	d105      	bne.n	8000df2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000de6:	4b48      	ldr	r3, [pc, #288]	; (8000f08 <HAL_RCC_OscConfig+0x4f4>)
 8000de8:	69db      	ldr	r3, [r3, #28]
 8000dea:	4a47      	ldr	r2, [pc, #284]	; (8000f08 <HAL_RCC_OscConfig+0x4f4>)
 8000dec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000df0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	69db      	ldr	r3, [r3, #28]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	f000 8081 	beq.w	8000efe <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000dfc:	4b42      	ldr	r3, [pc, #264]	; (8000f08 <HAL_RCC_OscConfig+0x4f4>)
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	f003 030c 	and.w	r3, r3, #12
 8000e04:	2b08      	cmp	r3, #8
 8000e06:	d061      	beq.n	8000ecc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	69db      	ldr	r3, [r3, #28]
 8000e0c:	2b02      	cmp	r3, #2
 8000e0e:	d146      	bne.n	8000e9e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e10:	4b3f      	ldr	r3, [pc, #252]	; (8000f10 <HAL_RCC_OscConfig+0x4fc>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e16:	f7ff f9f1 	bl	80001fc <HAL_GetTick>
 8000e1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e1c:	e008      	b.n	8000e30 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e1e:	f7ff f9ed 	bl	80001fc <HAL_GetTick>
 8000e22:	4602      	mov	r2, r0
 8000e24:	693b      	ldr	r3, [r7, #16]
 8000e26:	1ad3      	subs	r3, r2, r3
 8000e28:	2b02      	cmp	r3, #2
 8000e2a:	d901      	bls.n	8000e30 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000e2c:	2303      	movs	r3, #3
 8000e2e:	e067      	b.n	8000f00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e30:	4b35      	ldr	r3, [pc, #212]	; (8000f08 <HAL_RCC_OscConfig+0x4f4>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d1f0      	bne.n	8000e1e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	6a1b      	ldr	r3, [r3, #32]
 8000e40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e44:	d108      	bne.n	8000e58 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000e46:	4b30      	ldr	r3, [pc, #192]	; (8000f08 <HAL_RCC_OscConfig+0x4f4>)
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	689b      	ldr	r3, [r3, #8]
 8000e52:	492d      	ldr	r1, [pc, #180]	; (8000f08 <HAL_RCC_OscConfig+0x4f4>)
 8000e54:	4313      	orrs	r3, r2
 8000e56:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000e58:	4b2b      	ldr	r3, [pc, #172]	; (8000f08 <HAL_RCC_OscConfig+0x4f4>)
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	6a19      	ldr	r1, [r3, #32]
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e68:	430b      	orrs	r3, r1
 8000e6a:	4927      	ldr	r1, [pc, #156]	; (8000f08 <HAL_RCC_OscConfig+0x4f4>)
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000e70:	4b27      	ldr	r3, [pc, #156]	; (8000f10 <HAL_RCC_OscConfig+0x4fc>)
 8000e72:	2201      	movs	r2, #1
 8000e74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e76:	f7ff f9c1 	bl	80001fc <HAL_GetTick>
 8000e7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000e7c:	e008      	b.n	8000e90 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e7e:	f7ff f9bd 	bl	80001fc <HAL_GetTick>
 8000e82:	4602      	mov	r2, r0
 8000e84:	693b      	ldr	r3, [r7, #16]
 8000e86:	1ad3      	subs	r3, r2, r3
 8000e88:	2b02      	cmp	r3, #2
 8000e8a:	d901      	bls.n	8000e90 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000e8c:	2303      	movs	r3, #3
 8000e8e:	e037      	b.n	8000f00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000e90:	4b1d      	ldr	r3, [pc, #116]	; (8000f08 <HAL_RCC_OscConfig+0x4f4>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d0f0      	beq.n	8000e7e <HAL_RCC_OscConfig+0x46a>
 8000e9c:	e02f      	b.n	8000efe <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e9e:	4b1c      	ldr	r3, [pc, #112]	; (8000f10 <HAL_RCC_OscConfig+0x4fc>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ea4:	f7ff f9aa 	bl	80001fc <HAL_GetTick>
 8000ea8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000eaa:	e008      	b.n	8000ebe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000eac:	f7ff f9a6 	bl	80001fc <HAL_GetTick>
 8000eb0:	4602      	mov	r2, r0
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	1ad3      	subs	r3, r2, r3
 8000eb6:	2b02      	cmp	r3, #2
 8000eb8:	d901      	bls.n	8000ebe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000eba:	2303      	movs	r3, #3
 8000ebc:	e020      	b.n	8000f00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ebe:	4b12      	ldr	r3, [pc, #72]	; (8000f08 <HAL_RCC_OscConfig+0x4f4>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d1f0      	bne.n	8000eac <HAL_RCC_OscConfig+0x498>
 8000eca:	e018      	b.n	8000efe <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	69db      	ldr	r3, [r3, #28]
 8000ed0:	2b01      	cmp	r3, #1
 8000ed2:	d101      	bne.n	8000ed8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	e013      	b.n	8000f00 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000ed8:	4b0b      	ldr	r3, [pc, #44]	; (8000f08 <HAL_RCC_OscConfig+0x4f4>)
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6a1b      	ldr	r3, [r3, #32]
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	d106      	bne.n	8000efa <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000ef6:	429a      	cmp	r2, r3
 8000ef8:	d001      	beq.n	8000efe <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8000efa:	2301      	movs	r3, #1
 8000efc:	e000      	b.n	8000f00 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8000efe:	2300      	movs	r3, #0
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3718      	adds	r7, #24
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	40021000 	.word	0x40021000
 8000f0c:	40007000 	.word	0x40007000
 8000f10:	42420060 	.word	0x42420060

08000f14 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d101      	bne.n	8000f28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000f24:	2301      	movs	r3, #1
 8000f26:	e0d0      	b.n	80010ca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000f28:	4b6a      	ldr	r3, [pc, #424]	; (80010d4 <HAL_RCC_ClockConfig+0x1c0>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f003 0307 	and.w	r3, r3, #7
 8000f30:	683a      	ldr	r2, [r7, #0]
 8000f32:	429a      	cmp	r2, r3
 8000f34:	d910      	bls.n	8000f58 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f36:	4b67      	ldr	r3, [pc, #412]	; (80010d4 <HAL_RCC_ClockConfig+0x1c0>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f023 0207 	bic.w	r2, r3, #7
 8000f3e:	4965      	ldr	r1, [pc, #404]	; (80010d4 <HAL_RCC_ClockConfig+0x1c0>)
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	4313      	orrs	r3, r2
 8000f44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f46:	4b63      	ldr	r3, [pc, #396]	; (80010d4 <HAL_RCC_ClockConfig+0x1c0>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f003 0307 	and.w	r3, r3, #7
 8000f4e:	683a      	ldr	r2, [r7, #0]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	d001      	beq.n	8000f58 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000f54:	2301      	movs	r3, #1
 8000f56:	e0b8      	b.n	80010ca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f003 0302 	and.w	r3, r3, #2
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d020      	beq.n	8000fa6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f003 0304 	and.w	r3, r3, #4
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d005      	beq.n	8000f7c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000f70:	4b59      	ldr	r3, [pc, #356]	; (80010d8 <HAL_RCC_ClockConfig+0x1c4>)
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	4a58      	ldr	r2, [pc, #352]	; (80010d8 <HAL_RCC_ClockConfig+0x1c4>)
 8000f76:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000f7a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f003 0308 	and.w	r3, r3, #8
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d005      	beq.n	8000f94 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000f88:	4b53      	ldr	r3, [pc, #332]	; (80010d8 <HAL_RCC_ClockConfig+0x1c4>)
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	4a52      	ldr	r2, [pc, #328]	; (80010d8 <HAL_RCC_ClockConfig+0x1c4>)
 8000f8e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000f92:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000f94:	4b50      	ldr	r3, [pc, #320]	; (80010d8 <HAL_RCC_ClockConfig+0x1c4>)
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	689b      	ldr	r3, [r3, #8]
 8000fa0:	494d      	ldr	r1, [pc, #308]	; (80010d8 <HAL_RCC_ClockConfig+0x1c4>)
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f003 0301 	and.w	r3, r3, #1
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d040      	beq.n	8001034 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d107      	bne.n	8000fca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fba:	4b47      	ldr	r3, [pc, #284]	; (80010d8 <HAL_RCC_ClockConfig+0x1c4>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d115      	bne.n	8000ff2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	e07f      	b.n	80010ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	2b02      	cmp	r3, #2
 8000fd0:	d107      	bne.n	8000fe2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fd2:	4b41      	ldr	r3, [pc, #260]	; (80010d8 <HAL_RCC_ClockConfig+0x1c4>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d109      	bne.n	8000ff2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e073      	b.n	80010ca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fe2:	4b3d      	ldr	r3, [pc, #244]	; (80010d8 <HAL_RCC_ClockConfig+0x1c4>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f003 0302 	and.w	r3, r3, #2
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d101      	bne.n	8000ff2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	e06b      	b.n	80010ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000ff2:	4b39      	ldr	r3, [pc, #228]	; (80010d8 <HAL_RCC_ClockConfig+0x1c4>)
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	f023 0203 	bic.w	r2, r3, #3
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	4936      	ldr	r1, [pc, #216]	; (80010d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001000:	4313      	orrs	r3, r2
 8001002:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001004:	f7ff f8fa 	bl	80001fc <HAL_GetTick>
 8001008:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800100a:	e00a      	b.n	8001022 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800100c:	f7ff f8f6 	bl	80001fc <HAL_GetTick>
 8001010:	4602      	mov	r2, r0
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	f241 3288 	movw	r2, #5000	; 0x1388
 800101a:	4293      	cmp	r3, r2
 800101c:	d901      	bls.n	8001022 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800101e:	2303      	movs	r3, #3
 8001020:	e053      	b.n	80010ca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001022:	4b2d      	ldr	r3, [pc, #180]	; (80010d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	f003 020c 	and.w	r2, r3, #12
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	429a      	cmp	r2, r3
 8001032:	d1eb      	bne.n	800100c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001034:	4b27      	ldr	r3, [pc, #156]	; (80010d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f003 0307 	and.w	r3, r3, #7
 800103c:	683a      	ldr	r2, [r7, #0]
 800103e:	429a      	cmp	r2, r3
 8001040:	d210      	bcs.n	8001064 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001042:	4b24      	ldr	r3, [pc, #144]	; (80010d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f023 0207 	bic.w	r2, r3, #7
 800104a:	4922      	ldr	r1, [pc, #136]	; (80010d4 <HAL_RCC_ClockConfig+0x1c0>)
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	4313      	orrs	r3, r2
 8001050:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001052:	4b20      	ldr	r3, [pc, #128]	; (80010d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f003 0307 	and.w	r3, r3, #7
 800105a:	683a      	ldr	r2, [r7, #0]
 800105c:	429a      	cmp	r2, r3
 800105e:	d001      	beq.n	8001064 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001060:	2301      	movs	r3, #1
 8001062:	e032      	b.n	80010ca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f003 0304 	and.w	r3, r3, #4
 800106c:	2b00      	cmp	r3, #0
 800106e:	d008      	beq.n	8001082 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001070:	4b19      	ldr	r3, [pc, #100]	; (80010d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	68db      	ldr	r3, [r3, #12]
 800107c:	4916      	ldr	r1, [pc, #88]	; (80010d8 <HAL_RCC_ClockConfig+0x1c4>)
 800107e:	4313      	orrs	r3, r2
 8001080:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f003 0308 	and.w	r3, r3, #8
 800108a:	2b00      	cmp	r3, #0
 800108c:	d009      	beq.n	80010a2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800108e:	4b12      	ldr	r3, [pc, #72]	; (80010d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	691b      	ldr	r3, [r3, #16]
 800109a:	00db      	lsls	r3, r3, #3
 800109c:	490e      	ldr	r1, [pc, #56]	; (80010d8 <HAL_RCC_ClockConfig+0x1c4>)
 800109e:	4313      	orrs	r3, r2
 80010a0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80010a2:	f000 f821 	bl	80010e8 <HAL_RCC_GetSysClockFreq>
 80010a6:	4601      	mov	r1, r0
 80010a8:	4b0b      	ldr	r3, [pc, #44]	; (80010d8 <HAL_RCC_ClockConfig+0x1c4>)
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	091b      	lsrs	r3, r3, #4
 80010ae:	f003 030f 	and.w	r3, r3, #15
 80010b2:	4a0a      	ldr	r2, [pc, #40]	; (80010dc <HAL_RCC_ClockConfig+0x1c8>)
 80010b4:	5cd3      	ldrb	r3, [r2, r3]
 80010b6:	fa21 f303 	lsr.w	r3, r1, r3
 80010ba:	4a09      	ldr	r2, [pc, #36]	; (80010e0 <HAL_RCC_ClockConfig+0x1cc>)
 80010bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80010be:	4b09      	ldr	r3, [pc, #36]	; (80010e4 <HAL_RCC_ClockConfig+0x1d0>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4618      	mov	r0, r3
 80010c4:	f7ff f858 	bl	8000178 <HAL_InitTick>

  return HAL_OK;
 80010c8:	2300      	movs	r3, #0
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3710      	adds	r7, #16
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	40022000 	.word	0x40022000
 80010d8:	40021000 	.word	0x40021000
 80010dc:	080027e4 	.word	0x080027e4
 80010e0:	20000008 	.word	0x20000008
 80010e4:	20000000 	.word	0x20000000

080010e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80010e8:	b490      	push	{r4, r7}
 80010ea:	b08a      	sub	sp, #40	; 0x28
 80010ec:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80010ee:	4b2a      	ldr	r3, [pc, #168]	; (8001198 <HAL_RCC_GetSysClockFreq+0xb0>)
 80010f0:	1d3c      	adds	r4, r7, #4
 80010f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80010f8:	4b28      	ldr	r3, [pc, #160]	; (800119c <HAL_RCC_GetSysClockFreq+0xb4>)
 80010fa:	881b      	ldrh	r3, [r3, #0]
 80010fc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80010fe:	2300      	movs	r3, #0
 8001100:	61fb      	str	r3, [r7, #28]
 8001102:	2300      	movs	r3, #0
 8001104:	61bb      	str	r3, [r7, #24]
 8001106:	2300      	movs	r3, #0
 8001108:	627b      	str	r3, [r7, #36]	; 0x24
 800110a:	2300      	movs	r3, #0
 800110c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800110e:	2300      	movs	r3, #0
 8001110:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001112:	4b23      	ldr	r3, [pc, #140]	; (80011a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	f003 030c 	and.w	r3, r3, #12
 800111e:	2b04      	cmp	r3, #4
 8001120:	d002      	beq.n	8001128 <HAL_RCC_GetSysClockFreq+0x40>
 8001122:	2b08      	cmp	r3, #8
 8001124:	d003      	beq.n	800112e <HAL_RCC_GetSysClockFreq+0x46>
 8001126:	e02d      	b.n	8001184 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001128:	4b1e      	ldr	r3, [pc, #120]	; (80011a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800112a:	623b      	str	r3, [r7, #32]
      break;
 800112c:	e02d      	b.n	800118a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	0c9b      	lsrs	r3, r3, #18
 8001132:	f003 030f 	and.w	r3, r3, #15
 8001136:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800113a:	4413      	add	r3, r2
 800113c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001140:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001148:	2b00      	cmp	r3, #0
 800114a:	d013      	beq.n	8001174 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800114c:	4b14      	ldr	r3, [pc, #80]	; (80011a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	0c5b      	lsrs	r3, r3, #17
 8001152:	f003 0301 	and.w	r3, r3, #1
 8001156:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800115a:	4413      	add	r3, r2
 800115c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001160:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	4a0f      	ldr	r2, [pc, #60]	; (80011a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001166:	fb02 f203 	mul.w	r2, r2, r3
 800116a:	69bb      	ldr	r3, [r7, #24]
 800116c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001170:	627b      	str	r3, [r7, #36]	; 0x24
 8001172:	e004      	b.n	800117e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	4a0c      	ldr	r2, [pc, #48]	; (80011a8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001178:	fb02 f303 	mul.w	r3, r2, r3
 800117c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800117e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001180:	623b      	str	r3, [r7, #32]
      break;
 8001182:	e002      	b.n	800118a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001184:	4b07      	ldr	r3, [pc, #28]	; (80011a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001186:	623b      	str	r3, [r7, #32]
      break;
 8001188:	bf00      	nop
    }
  }
  return sysclockfreq;
 800118a:	6a3b      	ldr	r3, [r7, #32]
}
 800118c:	4618      	mov	r0, r3
 800118e:	3728      	adds	r7, #40	; 0x28
 8001190:	46bd      	mov	sp, r7
 8001192:	bc90      	pop	{r4, r7}
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	080027d0 	.word	0x080027d0
 800119c:	080027e0 	.word	0x080027e0
 80011a0:	40021000 	.word	0x40021000
 80011a4:	007a1200 	.word	0x007a1200
 80011a8:	003d0900 	.word	0x003d0900

080011ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80011b0:	4b02      	ldr	r3, [pc, #8]	; (80011bc <HAL_RCC_GetHCLKFreq+0x10>)
 80011b2:	681b      	ldr	r3, [r3, #0]
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bc80      	pop	{r7}
 80011ba:	4770      	bx	lr
 80011bc:	20000008 	.word	0x20000008

080011c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80011c4:	f7ff fff2 	bl	80011ac <HAL_RCC_GetHCLKFreq>
 80011c8:	4601      	mov	r1, r0
 80011ca:	4b05      	ldr	r3, [pc, #20]	; (80011e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	0a1b      	lsrs	r3, r3, #8
 80011d0:	f003 0307 	and.w	r3, r3, #7
 80011d4:	4a03      	ldr	r2, [pc, #12]	; (80011e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80011d6:	5cd3      	ldrb	r3, [r2, r3]
 80011d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80011dc:	4618      	mov	r0, r3
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	40021000 	.word	0x40021000
 80011e4:	080027f4 	.word	0x080027f4

080011e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80011ec:	f7ff ffde 	bl	80011ac <HAL_RCC_GetHCLKFreq>
 80011f0:	4601      	mov	r1, r0
 80011f2:	4b05      	ldr	r3, [pc, #20]	; (8001208 <HAL_RCC_GetPCLK2Freq+0x20>)
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	0adb      	lsrs	r3, r3, #11
 80011f8:	f003 0307 	and.w	r3, r3, #7
 80011fc:	4a03      	ldr	r2, [pc, #12]	; (800120c <HAL_RCC_GetPCLK2Freq+0x24>)
 80011fe:	5cd3      	ldrb	r3, [r2, r3]
 8001200:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001204:	4618      	mov	r0, r3
 8001206:	bd80      	pop	{r7, pc}
 8001208:	40021000 	.word	0x40021000
 800120c:	080027f4 	.word	0x080027f4

08001210 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001210:	b480      	push	{r7}
 8001212:	b085      	sub	sp, #20
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001218:	4b0a      	ldr	r3, [pc, #40]	; (8001244 <RCC_Delay+0x34>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a0a      	ldr	r2, [pc, #40]	; (8001248 <RCC_Delay+0x38>)
 800121e:	fba2 2303 	umull	r2, r3, r2, r3
 8001222:	0a5b      	lsrs	r3, r3, #9
 8001224:	687a      	ldr	r2, [r7, #4]
 8001226:	fb02 f303 	mul.w	r3, r2, r3
 800122a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800122c:	bf00      	nop
  }
  while (Delay --);
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	1e5a      	subs	r2, r3, #1
 8001232:	60fa      	str	r2, [r7, #12]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d1f9      	bne.n	800122c <RCC_Delay+0x1c>
}
 8001238:	bf00      	nop
 800123a:	3714      	adds	r7, #20
 800123c:	46bd      	mov	sp, r7
 800123e:	bc80      	pop	{r7}
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	20000008 	.word	0x20000008
 8001248:	10624dd3 	.word	0x10624dd3

0800124c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d101      	bne.n	800125e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	e041      	b.n	80012e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001264:	b2db      	uxtb	r3, r3
 8001266:	2b00      	cmp	r3, #0
 8001268:	d106      	bne.n	8001278 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2200      	movs	r2, #0
 800126e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f001 f96a 	bl	800254c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2202      	movs	r2, #2
 800127c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	3304      	adds	r3, #4
 8001288:	4619      	mov	r1, r3
 800128a:	4610      	mov	r0, r2
 800128c:	f000 fa9e 	bl	80017cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2201      	movs	r2, #1
 8001294:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2201      	movs	r2, #1
 800129c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2201      	movs	r2, #1
 80012a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2201      	movs	r2, #1
 80012ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2201      	movs	r2, #1
 80012b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2201      	movs	r2, #1
 80012bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2201      	movs	r2, #1
 80012c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2201      	movs	r2, #1
 80012cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2201      	movs	r2, #1
 80012d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2201      	movs	r2, #1
 80012dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80012e0:	2300      	movs	r3, #0
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}

080012ea <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80012ea:	b580      	push	{r7, lr}
 80012ec:	b082      	sub	sp, #8
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d101      	bne.n	80012fc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80012f8:	2301      	movs	r3, #1
 80012fa:	e041      	b.n	8001380 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001302:	b2db      	uxtb	r3, r3
 8001304:	2b00      	cmp	r3, #0
 8001306:	d106      	bne.n	8001316 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2200      	movs	r2, #0
 800130c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001310:	6878      	ldr	r0, [r7, #4]
 8001312:	f000 f839 	bl	8001388 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2202      	movs	r2, #2
 800131a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	3304      	adds	r3, #4
 8001326:	4619      	mov	r1, r3
 8001328:	4610      	mov	r0, r2
 800132a:	f000 fa4f 	bl	80017cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2201      	movs	r2, #1
 8001332:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2201      	movs	r2, #1
 800133a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2201      	movs	r2, #1
 8001342:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2201      	movs	r2, #1
 800134a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2201      	movs	r2, #1
 8001352:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2201      	movs	r2, #1
 800135a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2201      	movs	r2, #1
 8001362:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2201      	movs	r2, #1
 800136a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2201      	movs	r2, #1
 8001372:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2201      	movs	r2, #1
 800137a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800137e:	2300      	movs	r3, #0
}
 8001380:	4618      	mov	r0, r3
 8001382:	3708      	adds	r7, #8
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}

08001388 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001390:	bf00      	nop
 8001392:	370c      	adds	r7, #12
 8001394:	46bd      	mov	sp, r7
 8001396:	bc80      	pop	{r7}
 8001398:	4770      	bx	lr
	...

0800139c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d109      	bne.n	80013c0 <HAL_TIM_PWM_Start+0x24>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	bf14      	ite	ne
 80013b8:	2301      	movne	r3, #1
 80013ba:	2300      	moveq	r3, #0
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	e022      	b.n	8001406 <HAL_TIM_PWM_Start+0x6a>
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	2b04      	cmp	r3, #4
 80013c4:	d109      	bne.n	80013da <HAL_TIM_PWM_Start+0x3e>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	bf14      	ite	ne
 80013d2:	2301      	movne	r3, #1
 80013d4:	2300      	moveq	r3, #0
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	e015      	b.n	8001406 <HAL_TIM_PWM_Start+0x6a>
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	2b08      	cmp	r3, #8
 80013de:	d109      	bne.n	80013f4 <HAL_TIM_PWM_Start+0x58>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	bf14      	ite	ne
 80013ec:	2301      	movne	r3, #1
 80013ee:	2300      	moveq	r3, #0
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	e008      	b.n	8001406 <HAL_TIM_PWM_Start+0x6a>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	bf14      	ite	ne
 8001400:	2301      	movne	r3, #1
 8001402:	2300      	moveq	r3, #0
 8001404:	b2db      	uxtb	r3, r3
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e05e      	b.n	80014cc <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d104      	bne.n	800141e <HAL_TIM_PWM_Start+0x82>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2202      	movs	r2, #2
 8001418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800141c:	e013      	b.n	8001446 <HAL_TIM_PWM_Start+0xaa>
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	2b04      	cmp	r3, #4
 8001422:	d104      	bne.n	800142e <HAL_TIM_PWM_Start+0x92>
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2202      	movs	r2, #2
 8001428:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800142c:	e00b      	b.n	8001446 <HAL_TIM_PWM_Start+0xaa>
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	2b08      	cmp	r3, #8
 8001432:	d104      	bne.n	800143e <HAL_TIM_PWM_Start+0xa2>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2202      	movs	r2, #2
 8001438:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800143c:	e003      	b.n	8001446 <HAL_TIM_PWM_Start+0xaa>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2202      	movs	r2, #2
 8001442:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	2201      	movs	r2, #1
 800144c:	6839      	ldr	r1, [r7, #0]
 800144e:	4618      	mov	r0, r3
 8001450:	f000 fc3c 	bl	8001ccc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a1e      	ldr	r2, [pc, #120]	; (80014d4 <HAL_TIM_PWM_Start+0x138>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d107      	bne.n	800146e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800146c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a18      	ldr	r2, [pc, #96]	; (80014d4 <HAL_TIM_PWM_Start+0x138>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d00e      	beq.n	8001496 <HAL_TIM_PWM_Start+0xfa>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001480:	d009      	beq.n	8001496 <HAL_TIM_PWM_Start+0xfa>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a14      	ldr	r2, [pc, #80]	; (80014d8 <HAL_TIM_PWM_Start+0x13c>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d004      	beq.n	8001496 <HAL_TIM_PWM_Start+0xfa>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a12      	ldr	r2, [pc, #72]	; (80014dc <HAL_TIM_PWM_Start+0x140>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d111      	bne.n	80014ba <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	f003 0307 	and.w	r3, r3, #7
 80014a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	2b06      	cmp	r3, #6
 80014a6:	d010      	beq.n	80014ca <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f042 0201 	orr.w	r2, r2, #1
 80014b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80014b8:	e007      	b.n	80014ca <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f042 0201 	orr.w	r2, r2, #1
 80014c8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80014ca:	2300      	movs	r3, #0
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3710      	adds	r7, #16
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	40012c00 	.word	0x40012c00
 80014d8:	40000400 	.word	0x40000400
 80014dc:	40000800 	.word	0x40000800

080014e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	60f8      	str	r0, [r7, #12]
 80014e8:	60b9      	str	r1, [r7, #8]
 80014ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d101      	bne.n	80014fa <HAL_TIM_PWM_ConfigChannel+0x1a>
 80014f6:	2302      	movs	r3, #2
 80014f8:	e0ac      	b.n	8001654 <HAL_TIM_PWM_ConfigChannel+0x174>
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	2201      	movs	r2, #1
 80014fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2b0c      	cmp	r3, #12
 8001506:	f200 809f 	bhi.w	8001648 <HAL_TIM_PWM_ConfigChannel+0x168>
 800150a:	a201      	add	r2, pc, #4	; (adr r2, 8001510 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800150c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001510:	08001545 	.word	0x08001545
 8001514:	08001649 	.word	0x08001649
 8001518:	08001649 	.word	0x08001649
 800151c:	08001649 	.word	0x08001649
 8001520:	08001585 	.word	0x08001585
 8001524:	08001649 	.word	0x08001649
 8001528:	08001649 	.word	0x08001649
 800152c:	08001649 	.word	0x08001649
 8001530:	080015c7 	.word	0x080015c7
 8001534:	08001649 	.word	0x08001649
 8001538:	08001649 	.word	0x08001649
 800153c:	08001649 	.word	0x08001649
 8001540:	08001607 	.word	0x08001607
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	68b9      	ldr	r1, [r7, #8]
 800154a:	4618      	mov	r0, r3
 800154c:	f000 f9a0 	bl	8001890 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	699a      	ldr	r2, [r3, #24]
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f042 0208 	orr.w	r2, r2, #8
 800155e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	699a      	ldr	r2, [r3, #24]
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f022 0204 	bic.w	r2, r2, #4
 800156e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	6999      	ldr	r1, [r3, #24]
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	691a      	ldr	r2, [r3, #16]
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	430a      	orrs	r2, r1
 8001580:	619a      	str	r2, [r3, #24]
      break;
 8001582:	e062      	b.n	800164a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	68b9      	ldr	r1, [r7, #8]
 800158a:	4618      	mov	r0, r3
 800158c:	f000 f9e6 	bl	800195c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	699a      	ldr	r2, [r3, #24]
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800159e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	699a      	ldr	r2, [r3, #24]
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80015ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	6999      	ldr	r1, [r3, #24]
 80015b6:	68bb      	ldr	r3, [r7, #8]
 80015b8:	691b      	ldr	r3, [r3, #16]
 80015ba:	021a      	lsls	r2, r3, #8
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	430a      	orrs	r2, r1
 80015c2:	619a      	str	r2, [r3, #24]
      break;
 80015c4:	e041      	b.n	800164a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	68b9      	ldr	r1, [r7, #8]
 80015cc:	4618      	mov	r0, r3
 80015ce:	f000 fa2f 	bl	8001a30 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	69da      	ldr	r2, [r3, #28]
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f042 0208 	orr.w	r2, r2, #8
 80015e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	69da      	ldr	r2, [r3, #28]
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f022 0204 	bic.w	r2, r2, #4
 80015f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	69d9      	ldr	r1, [r3, #28]
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	691a      	ldr	r2, [r3, #16]
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	430a      	orrs	r2, r1
 8001602:	61da      	str	r2, [r3, #28]
      break;
 8001604:	e021      	b.n	800164a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	68b9      	ldr	r1, [r7, #8]
 800160c:	4618      	mov	r0, r3
 800160e:	f000 fa79 	bl	8001b04 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	69da      	ldr	r2, [r3, #28]
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001620:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	69da      	ldr	r2, [r3, #28]
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001630:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	69d9      	ldr	r1, [r3, #28]
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	691b      	ldr	r3, [r3, #16]
 800163c:	021a      	lsls	r2, r3, #8
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	430a      	orrs	r2, r1
 8001644:	61da      	str	r2, [r3, #28]
      break;
 8001646:	e000      	b.n	800164a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8001648:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	2200      	movs	r2, #0
 800164e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001652:	2300      	movs	r3, #0
}
 8001654:	4618      	mov	r0, r3
 8001656:	3710      	adds	r7, #16
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}

0800165c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800166c:	2b01      	cmp	r3, #1
 800166e:	d101      	bne.n	8001674 <HAL_TIM_ConfigClockSource+0x18>
 8001670:	2302      	movs	r3, #2
 8001672:	e0a6      	b.n	80017c2 <HAL_TIM_ConfigClockSource+0x166>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2201      	movs	r2, #1
 8001678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2202      	movs	r2, #2
 8001680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001692:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800169a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	68fa      	ldr	r2, [r7, #12]
 80016a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2b40      	cmp	r3, #64	; 0x40
 80016aa:	d067      	beq.n	800177c <HAL_TIM_ConfigClockSource+0x120>
 80016ac:	2b40      	cmp	r3, #64	; 0x40
 80016ae:	d80b      	bhi.n	80016c8 <HAL_TIM_ConfigClockSource+0x6c>
 80016b0:	2b10      	cmp	r3, #16
 80016b2:	d073      	beq.n	800179c <HAL_TIM_ConfigClockSource+0x140>
 80016b4:	2b10      	cmp	r3, #16
 80016b6:	d802      	bhi.n	80016be <HAL_TIM_ConfigClockSource+0x62>
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d06f      	beq.n	800179c <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80016bc:	e078      	b.n	80017b0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80016be:	2b20      	cmp	r3, #32
 80016c0:	d06c      	beq.n	800179c <HAL_TIM_ConfigClockSource+0x140>
 80016c2:	2b30      	cmp	r3, #48	; 0x30
 80016c4:	d06a      	beq.n	800179c <HAL_TIM_ConfigClockSource+0x140>
      break;
 80016c6:	e073      	b.n	80017b0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80016c8:	2b70      	cmp	r3, #112	; 0x70
 80016ca:	d00d      	beq.n	80016e8 <HAL_TIM_ConfigClockSource+0x8c>
 80016cc:	2b70      	cmp	r3, #112	; 0x70
 80016ce:	d804      	bhi.n	80016da <HAL_TIM_ConfigClockSource+0x7e>
 80016d0:	2b50      	cmp	r3, #80	; 0x50
 80016d2:	d033      	beq.n	800173c <HAL_TIM_ConfigClockSource+0xe0>
 80016d4:	2b60      	cmp	r3, #96	; 0x60
 80016d6:	d041      	beq.n	800175c <HAL_TIM_ConfigClockSource+0x100>
      break;
 80016d8:	e06a      	b.n	80017b0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80016da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016de:	d066      	beq.n	80017ae <HAL_TIM_ConfigClockSource+0x152>
 80016e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80016e4:	d017      	beq.n	8001716 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80016e6:	e063      	b.n	80017b0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6818      	ldr	r0, [r3, #0]
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	6899      	ldr	r1, [r3, #8]
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	685a      	ldr	r2, [r3, #4]
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	f000 fac9 	bl	8001c8e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800170a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	68fa      	ldr	r2, [r7, #12]
 8001712:	609a      	str	r2, [r3, #8]
      break;
 8001714:	e04c      	b.n	80017b0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6818      	ldr	r0, [r3, #0]
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	6899      	ldr	r1, [r3, #8]
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	685a      	ldr	r2, [r3, #4]
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	68db      	ldr	r3, [r3, #12]
 8001726:	f000 fab2 	bl	8001c8e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	689a      	ldr	r2, [r3, #8]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001738:	609a      	str	r2, [r3, #8]
      break;
 800173a:	e039      	b.n	80017b0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6818      	ldr	r0, [r3, #0]
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	6859      	ldr	r1, [r3, #4]
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	461a      	mov	r2, r3
 800174a:	f000 fa29 	bl	8001ba0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	2150      	movs	r1, #80	; 0x50
 8001754:	4618      	mov	r0, r3
 8001756:	f000 fa80 	bl	8001c5a <TIM_ITRx_SetConfig>
      break;
 800175a:	e029      	b.n	80017b0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6818      	ldr	r0, [r3, #0]
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	6859      	ldr	r1, [r3, #4]
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	461a      	mov	r2, r3
 800176a:	f000 fa47 	bl	8001bfc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	2160      	movs	r1, #96	; 0x60
 8001774:	4618      	mov	r0, r3
 8001776:	f000 fa70 	bl	8001c5a <TIM_ITRx_SetConfig>
      break;
 800177a:	e019      	b.n	80017b0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6818      	ldr	r0, [r3, #0]
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	6859      	ldr	r1, [r3, #4]
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	461a      	mov	r2, r3
 800178a:	f000 fa09 	bl	8001ba0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	2140      	movs	r1, #64	; 0x40
 8001794:	4618      	mov	r0, r3
 8001796:	f000 fa60 	bl	8001c5a <TIM_ITRx_SetConfig>
      break;
 800179a:	e009      	b.n	80017b0 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4619      	mov	r1, r3
 80017a6:	4610      	mov	r0, r2
 80017a8:	f000 fa57 	bl	8001c5a <TIM_ITRx_SetConfig>
        break;
 80017ac:	e000      	b.n	80017b0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80017ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2201      	movs	r2, #1
 80017b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2200      	movs	r2, #0
 80017bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80017c0:	2300      	movs	r3, #0
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3710      	adds	r7, #16
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
	...

080017cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b085      	sub	sp, #20
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	4a29      	ldr	r2, [pc, #164]	; (8001884 <TIM_Base_SetConfig+0xb8>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d00b      	beq.n	80017fc <TIM_Base_SetConfig+0x30>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017ea:	d007      	beq.n	80017fc <TIM_Base_SetConfig+0x30>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	4a26      	ldr	r2, [pc, #152]	; (8001888 <TIM_Base_SetConfig+0xbc>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d003      	beq.n	80017fc <TIM_Base_SetConfig+0x30>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	4a25      	ldr	r2, [pc, #148]	; (800188c <TIM_Base_SetConfig+0xc0>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d108      	bne.n	800180e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001802:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	68fa      	ldr	r2, [r7, #12]
 800180a:	4313      	orrs	r3, r2
 800180c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4a1c      	ldr	r2, [pc, #112]	; (8001884 <TIM_Base_SetConfig+0xb8>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d00b      	beq.n	800182e <TIM_Base_SetConfig+0x62>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800181c:	d007      	beq.n	800182e <TIM_Base_SetConfig+0x62>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4a19      	ldr	r2, [pc, #100]	; (8001888 <TIM_Base_SetConfig+0xbc>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d003      	beq.n	800182e <TIM_Base_SetConfig+0x62>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4a18      	ldr	r2, [pc, #96]	; (800188c <TIM_Base_SetConfig+0xc0>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d108      	bne.n	8001840 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001834:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	68db      	ldr	r3, [r3, #12]
 800183a:	68fa      	ldr	r2, [r7, #12]
 800183c:	4313      	orrs	r3, r2
 800183e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	695b      	ldr	r3, [r3, #20]
 800184a:	4313      	orrs	r3, r2
 800184c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	68fa      	ldr	r2, [r7, #12]
 8001852:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	689a      	ldr	r2, [r3, #8]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	4a07      	ldr	r2, [pc, #28]	; (8001884 <TIM_Base_SetConfig+0xb8>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d103      	bne.n	8001874 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	691a      	ldr	r2, [r3, #16]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2201      	movs	r2, #1
 8001878:	615a      	str	r2, [r3, #20]
}
 800187a:	bf00      	nop
 800187c:	3714      	adds	r7, #20
 800187e:	46bd      	mov	sp, r7
 8001880:	bc80      	pop	{r7}
 8001882:	4770      	bx	lr
 8001884:	40012c00 	.word	0x40012c00
 8001888:	40000400 	.word	0x40000400
 800188c:	40000800 	.word	0x40000800

08001890 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001890:	b480      	push	{r7}
 8001892:	b087      	sub	sp, #28
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6a1b      	ldr	r3, [r3, #32]
 800189e:	f023 0201 	bic.w	r2, r3, #1
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6a1b      	ldr	r3, [r3, #32]
 80018aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	699b      	ldr	r3, [r3, #24]
 80018b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	f023 0303 	bic.w	r3, r3, #3
 80018c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	68fa      	ldr	r2, [r7, #12]
 80018ce:	4313      	orrs	r3, r2
 80018d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	f023 0302 	bic.w	r3, r3, #2
 80018d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	697a      	ldr	r2, [r7, #20]
 80018e0:	4313      	orrs	r3, r2
 80018e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	4a1c      	ldr	r2, [pc, #112]	; (8001958 <TIM_OC1_SetConfig+0xc8>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d10c      	bne.n	8001906 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	f023 0308 	bic.w	r3, r3, #8
 80018f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	697a      	ldr	r2, [r7, #20]
 80018fa:	4313      	orrs	r3, r2
 80018fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	f023 0304 	bic.w	r3, r3, #4
 8001904:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4a13      	ldr	r2, [pc, #76]	; (8001958 <TIM_OC1_SetConfig+0xc8>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d111      	bne.n	8001932 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001914:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800191c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	695b      	ldr	r3, [r3, #20]
 8001922:	693a      	ldr	r2, [r7, #16]
 8001924:	4313      	orrs	r3, r2
 8001926:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	699b      	ldr	r3, [r3, #24]
 800192c:	693a      	ldr	r2, [r7, #16]
 800192e:	4313      	orrs	r3, r2
 8001930:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	693a      	ldr	r2, [r7, #16]
 8001936:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	68fa      	ldr	r2, [r7, #12]
 800193c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	685a      	ldr	r2, [r3, #4]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	697a      	ldr	r2, [r7, #20]
 800194a:	621a      	str	r2, [r3, #32]
}
 800194c:	bf00      	nop
 800194e:	371c      	adds	r7, #28
 8001950:	46bd      	mov	sp, r7
 8001952:	bc80      	pop	{r7}
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	40012c00 	.word	0x40012c00

0800195c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800195c:	b480      	push	{r7}
 800195e:	b087      	sub	sp, #28
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6a1b      	ldr	r3, [r3, #32]
 800196a:	f023 0210 	bic.w	r2, r3, #16
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6a1b      	ldr	r3, [r3, #32]
 8001976:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	699b      	ldr	r3, [r3, #24]
 8001982:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800198a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001992:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	021b      	lsls	r3, r3, #8
 800199a:	68fa      	ldr	r2, [r7, #12]
 800199c:	4313      	orrs	r3, r2
 800199e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	f023 0320 	bic.w	r3, r3, #32
 80019a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	011b      	lsls	r3, r3, #4
 80019ae:	697a      	ldr	r2, [r7, #20]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	4a1d      	ldr	r2, [pc, #116]	; (8001a2c <TIM_OC2_SetConfig+0xd0>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d10d      	bne.n	80019d8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80019c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	011b      	lsls	r3, r3, #4
 80019ca:	697a      	ldr	r2, [r7, #20]
 80019cc:	4313      	orrs	r3, r2
 80019ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80019d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	4a14      	ldr	r2, [pc, #80]	; (8001a2c <TIM_OC2_SetConfig+0xd0>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d113      	bne.n	8001a08 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80019e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80019ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	695b      	ldr	r3, [r3, #20]
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	4313      	orrs	r3, r2
 80019fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	699b      	ldr	r3, [r3, #24]
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	693a      	ldr	r2, [r7, #16]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	693a      	ldr	r2, [r7, #16]
 8001a0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	68fa      	ldr	r2, [r7, #12]
 8001a12:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	685a      	ldr	r2, [r3, #4]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	697a      	ldr	r2, [r7, #20]
 8001a20:	621a      	str	r2, [r3, #32]
}
 8001a22:	bf00      	nop
 8001a24:	371c      	adds	r7, #28
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bc80      	pop	{r7}
 8001a2a:	4770      	bx	lr
 8001a2c:	40012c00 	.word	0x40012c00

08001a30 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b087      	sub	sp, #28
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6a1b      	ldr	r3, [r3, #32]
 8001a3e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6a1b      	ldr	r3, [r3, #32]
 8001a4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	69db      	ldr	r3, [r3, #28]
 8001a56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	f023 0303 	bic.w	r3, r3, #3
 8001a66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	68fa      	ldr	r2, [r7, #12]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001a78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	021b      	lsls	r3, r3, #8
 8001a80:	697a      	ldr	r2, [r7, #20]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4a1d      	ldr	r2, [pc, #116]	; (8001b00 <TIM_OC3_SetConfig+0xd0>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d10d      	bne.n	8001aaa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001a94:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	68db      	ldr	r3, [r3, #12]
 8001a9a:	021b      	lsls	r3, r3, #8
 8001a9c:	697a      	ldr	r2, [r7, #20]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001aa8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4a14      	ldr	r2, [pc, #80]	; (8001b00 <TIM_OC3_SetConfig+0xd0>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d113      	bne.n	8001ada <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001ab8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001ac0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	695b      	ldr	r3, [r3, #20]
 8001ac6:	011b      	lsls	r3, r3, #4
 8001ac8:	693a      	ldr	r2, [r7, #16]
 8001aca:	4313      	orrs	r3, r2
 8001acc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	699b      	ldr	r3, [r3, #24]
 8001ad2:	011b      	lsls	r3, r3, #4
 8001ad4:	693a      	ldr	r2, [r7, #16]
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	693a      	ldr	r2, [r7, #16]
 8001ade:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	68fa      	ldr	r2, [r7, #12]
 8001ae4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	685a      	ldr	r2, [r3, #4]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	697a      	ldr	r2, [r7, #20]
 8001af2:	621a      	str	r2, [r3, #32]
}
 8001af4:	bf00      	nop
 8001af6:	371c      	adds	r7, #28
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bc80      	pop	{r7}
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	40012c00 	.word	0x40012c00

08001b04 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b087      	sub	sp, #28
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6a1b      	ldr	r3, [r3, #32]
 8001b12:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6a1b      	ldr	r3, [r3, #32]
 8001b1e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	69db      	ldr	r3, [r3, #28]
 8001b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001b32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	021b      	lsls	r3, r3, #8
 8001b42:	68fa      	ldr	r2, [r7, #12]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001b4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	031b      	lsls	r3, r3, #12
 8001b56:	693a      	ldr	r2, [r7, #16]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	4a0f      	ldr	r2, [pc, #60]	; (8001b9c <TIM_OC4_SetConfig+0x98>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d109      	bne.n	8001b78 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001b6a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	695b      	ldr	r3, [r3, #20]
 8001b70:	019b      	lsls	r3, r3, #6
 8001b72:	697a      	ldr	r2, [r7, #20]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	697a      	ldr	r2, [r7, #20]
 8001b7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	68fa      	ldr	r2, [r7, #12]
 8001b82:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685a      	ldr	r2, [r3, #4]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	693a      	ldr	r2, [r7, #16]
 8001b90:	621a      	str	r2, [r3, #32]
}
 8001b92:	bf00      	nop
 8001b94:	371c      	adds	r7, #28
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bc80      	pop	{r7}
 8001b9a:	4770      	bx	lr
 8001b9c:	40012c00 	.word	0x40012c00

08001ba0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b087      	sub	sp, #28
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	60f8      	str	r0, [r7, #12]
 8001ba8:	60b9      	str	r1, [r7, #8]
 8001baa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	6a1b      	ldr	r3, [r3, #32]
 8001bb0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	6a1b      	ldr	r3, [r3, #32]
 8001bb6:	f023 0201 	bic.w	r2, r3, #1
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	699b      	ldr	r3, [r3, #24]
 8001bc2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001bca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	011b      	lsls	r3, r3, #4
 8001bd0:	693a      	ldr	r2, [r7, #16]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	f023 030a 	bic.w	r3, r3, #10
 8001bdc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001bde:	697a      	ldr	r2, [r7, #20]
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	693a      	ldr	r2, [r7, #16]
 8001bea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	697a      	ldr	r2, [r7, #20]
 8001bf0:	621a      	str	r2, [r3, #32]
}
 8001bf2:	bf00      	nop
 8001bf4:	371c      	adds	r7, #28
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bc80      	pop	{r7}
 8001bfa:	4770      	bx	lr

08001bfc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b087      	sub	sp, #28
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	60f8      	str	r0, [r7, #12]
 8001c04:	60b9      	str	r1, [r7, #8]
 8001c06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	6a1b      	ldr	r3, [r3, #32]
 8001c0c:	f023 0210 	bic.w	r2, r3, #16
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	699b      	ldr	r3, [r3, #24]
 8001c18:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	6a1b      	ldr	r3, [r3, #32]
 8001c1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001c26:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	031b      	lsls	r3, r3, #12
 8001c2c:	697a      	ldr	r2, [r7, #20]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001c38:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	011b      	lsls	r3, r3, #4
 8001c3e:	693a      	ldr	r2, [r7, #16]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	697a      	ldr	r2, [r7, #20]
 8001c48:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	693a      	ldr	r2, [r7, #16]
 8001c4e:	621a      	str	r2, [r3, #32]
}
 8001c50:	bf00      	nop
 8001c52:	371c      	adds	r7, #28
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bc80      	pop	{r7}
 8001c58:	4770      	bx	lr

08001c5a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	b085      	sub	sp, #20
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
 8001c62:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c70:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001c72:	683a      	ldr	r2, [r7, #0]
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	f043 0307 	orr.w	r3, r3, #7
 8001c7c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	68fa      	ldr	r2, [r7, #12]
 8001c82:	609a      	str	r2, [r3, #8]
}
 8001c84:	bf00      	nop
 8001c86:	3714      	adds	r7, #20
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bc80      	pop	{r7}
 8001c8c:	4770      	bx	lr

08001c8e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	b087      	sub	sp, #28
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	60f8      	str	r0, [r7, #12]
 8001c96:	60b9      	str	r1, [r7, #8]
 8001c98:	607a      	str	r2, [r7, #4]
 8001c9a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001ca8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	021a      	lsls	r2, r3, #8
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	431a      	orrs	r2, r3
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	697a      	ldr	r2, [r7, #20]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	697a      	ldr	r2, [r7, #20]
 8001cc0:	609a      	str	r2, [r3, #8]
}
 8001cc2:	bf00      	nop
 8001cc4:	371c      	adds	r7, #28
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bc80      	pop	{r7}
 8001cca:	4770      	bx	lr

08001ccc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b087      	sub	sp, #28
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	60f8      	str	r0, [r7, #12]
 8001cd4:	60b9      	str	r1, [r7, #8]
 8001cd6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	f003 031f 	and.w	r3, r3, #31
 8001cde:	2201      	movs	r2, #1
 8001ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	6a1a      	ldr	r2, [r3, #32]
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	43db      	mvns	r3, r3
 8001cee:	401a      	ands	r2, r3
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	6a1a      	ldr	r2, [r3, #32]
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	f003 031f 	and.w	r3, r3, #31
 8001cfe:	6879      	ldr	r1, [r7, #4]
 8001d00:	fa01 f303 	lsl.w	r3, r1, r3
 8001d04:	431a      	orrs	r2, r3
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	621a      	str	r2, [r3, #32]
}
 8001d0a:	bf00      	nop
 8001d0c:	371c      	adds	r7, #28
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bc80      	pop	{r7}
 8001d12:	4770      	bx	lr

08001d14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b085      	sub	sp, #20
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d101      	bne.n	8001d2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001d28:	2302      	movs	r3, #2
 8001d2a:	e046      	b.n	8001dba <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2202      	movs	r2, #2
 8001d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	68fa      	ldr	r2, [r7, #12]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	68fa      	ldr	r2, [r7, #12]
 8001d64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a16      	ldr	r2, [pc, #88]	; (8001dc4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d00e      	beq.n	8001d8e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d78:	d009      	beq.n	8001d8e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a12      	ldr	r2, [pc, #72]	; (8001dc8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d004      	beq.n	8001d8e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a10      	ldr	r2, [pc, #64]	; (8001dcc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d10c      	bne.n	8001da8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001d94:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	68ba      	ldr	r2, [r7, #8]
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	68ba      	ldr	r2, [r7, #8]
 8001da6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2201      	movs	r2, #1
 8001dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2200      	movs	r2, #0
 8001db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001db8:	2300      	movs	r3, #0
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3714      	adds	r7, #20
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bc80      	pop	{r7}
 8001dc2:	4770      	bx	lr
 8001dc4:	40012c00 	.word	0x40012c00
 8001dc8:	40000400 	.word	0x40000400
 8001dcc:	40000800 	.word	0x40000800

08001dd0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b085      	sub	sp, #20
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d101      	bne.n	8001dec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8001de8:	2302      	movs	r3, #2
 8001dea:	e03d      	b.n	8001e68 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2201      	movs	r2, #1
 8001df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	68db      	ldr	r3, [r3, #12]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	691b      	ldr	r3, [r3, #16]
 8001e36:	4313      	orrs	r3, r2
 8001e38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	695b      	ldr	r3, [r3, #20]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	69db      	ldr	r3, [r3, #28]
 8001e52:	4313      	orrs	r3, r2
 8001e54:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	68fa      	ldr	r2, [r7, #12]
 8001e5c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001e66:	2300      	movs	r3, #0
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3714      	adds	r7, #20
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bc80      	pop	{r7}
 8001e70:	4770      	bx	lr

08001e72 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e72:	b580      	push	{r7, lr}
 8001e74:	b082      	sub	sp, #8
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d101      	bne.n	8001e84 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e03f      	b.n	8001f04 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d106      	bne.n	8001e9e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2200      	movs	r2, #0
 8001e94:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f000 fbd3 	bl	8002644 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2224      	movs	r2, #36	; 0x24
 8001ea2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	68da      	ldr	r2, [r3, #12]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001eb4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f000 f828 	bl	8001f0c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	691a      	ldr	r2, [r3, #16]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001eca:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	695a      	ldr	r2, [r3, #20]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001eda:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	68da      	ldr	r2, [r3, #12]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001eea:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2220      	movs	r2, #32
 8001ef6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2220      	movs	r2, #32
 8001efe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001f02:	2300      	movs	r3, #0
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3708      	adds	r7, #8
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}

08001f0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	691b      	ldr	r3, [r3, #16]
 8001f1a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	68da      	ldr	r2, [r3, #12]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	430a      	orrs	r2, r1
 8001f28:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	689a      	ldr	r2, [r3, #8]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	691b      	ldr	r3, [r3, #16]
 8001f32:	431a      	orrs	r2, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	695b      	ldr	r3, [r3, #20]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001f46:	f023 030c 	bic.w	r3, r3, #12
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	6812      	ldr	r2, [r2, #0]
 8001f4e:	68b9      	ldr	r1, [r7, #8]
 8001f50:	430b      	orrs	r3, r1
 8001f52:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	695b      	ldr	r3, [r3, #20]
 8001f5a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	699a      	ldr	r2, [r3, #24]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	430a      	orrs	r2, r1
 8001f68:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a2c      	ldr	r2, [pc, #176]	; (8002020 <UART_SetConfig+0x114>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d103      	bne.n	8001f7c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001f74:	f7ff f938 	bl	80011e8 <HAL_RCC_GetPCLK2Freq>
 8001f78:	60f8      	str	r0, [r7, #12]
 8001f7a:	e002      	b.n	8001f82 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001f7c:	f7ff f920 	bl	80011c0 <HAL_RCC_GetPCLK1Freq>
 8001f80:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001f82:	68fa      	ldr	r2, [r7, #12]
 8001f84:	4613      	mov	r3, r2
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	4413      	add	r3, r2
 8001f8a:	009a      	lsls	r2, r3, #2
 8001f8c:	441a      	add	r2, r3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f98:	4a22      	ldr	r2, [pc, #136]	; (8002024 <UART_SetConfig+0x118>)
 8001f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f9e:	095b      	lsrs	r3, r3, #5
 8001fa0:	0119      	lsls	r1, r3, #4
 8001fa2:	68fa      	ldr	r2, [r7, #12]
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	4413      	add	r3, r2
 8001faa:	009a      	lsls	r2, r3, #2
 8001fac:	441a      	add	r2, r3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	fbb2 f2f3 	udiv	r2, r2, r3
 8001fb8:	4b1a      	ldr	r3, [pc, #104]	; (8002024 <UART_SetConfig+0x118>)
 8001fba:	fba3 0302 	umull	r0, r3, r3, r2
 8001fbe:	095b      	lsrs	r3, r3, #5
 8001fc0:	2064      	movs	r0, #100	; 0x64
 8001fc2:	fb00 f303 	mul.w	r3, r0, r3
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	011b      	lsls	r3, r3, #4
 8001fca:	3332      	adds	r3, #50	; 0x32
 8001fcc:	4a15      	ldr	r2, [pc, #84]	; (8002024 <UART_SetConfig+0x118>)
 8001fce:	fba2 2303 	umull	r2, r3, r2, r3
 8001fd2:	095b      	lsrs	r3, r3, #5
 8001fd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fd8:	4419      	add	r1, r3
 8001fda:	68fa      	ldr	r2, [r7, #12]
 8001fdc:	4613      	mov	r3, r2
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	4413      	add	r3, r2
 8001fe2:	009a      	lsls	r2, r3, #2
 8001fe4:	441a      	add	r2, r3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ff0:	4b0c      	ldr	r3, [pc, #48]	; (8002024 <UART_SetConfig+0x118>)
 8001ff2:	fba3 0302 	umull	r0, r3, r3, r2
 8001ff6:	095b      	lsrs	r3, r3, #5
 8001ff8:	2064      	movs	r0, #100	; 0x64
 8001ffa:	fb00 f303 	mul.w	r3, r0, r3
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	011b      	lsls	r3, r3, #4
 8002002:	3332      	adds	r3, #50	; 0x32
 8002004:	4a07      	ldr	r2, [pc, #28]	; (8002024 <UART_SetConfig+0x118>)
 8002006:	fba2 2303 	umull	r2, r3, r2, r3
 800200a:	095b      	lsrs	r3, r3, #5
 800200c:	f003 020f 	and.w	r2, r3, #15
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	440a      	add	r2, r1
 8002016:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002018:	bf00      	nop
 800201a:	3710      	adds	r7, #16
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	40013800 	.word	0x40013800
 8002024:	51eb851f 	.word	0x51eb851f

08002028 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800202e:	4b0c      	ldr	r3, [pc, #48]	; (8002060 <MX_DMA_Init+0x38>)
 8002030:	695b      	ldr	r3, [r3, #20]
 8002032:	4a0b      	ldr	r2, [pc, #44]	; (8002060 <MX_DMA_Init+0x38>)
 8002034:	f043 0301 	orr.w	r3, r3, #1
 8002038:	6153      	str	r3, [r2, #20]
 800203a:	4b09      	ldr	r3, [pc, #36]	; (8002060 <MX_DMA_Init+0x38>)
 800203c:	695b      	ldr	r3, [r3, #20]
 800203e:	f003 0301 	and.w	r3, r3, #1
 8002042:	607b      	str	r3, [r7, #4]
 8002044:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8002046:	2200      	movs	r2, #0
 8002048:	2100      	movs	r1, #0
 800204a:	2010      	movs	r0, #16
 800204c:	f7fe f9d9 	bl	8000402 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8002050:	2010      	movs	r0, #16
 8002052:	f7fe f9f2 	bl	800043a <HAL_NVIC_EnableIRQ>

}
 8002056:	bf00      	nop
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	40021000 	.word	0x40021000

08002064 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b088      	sub	sp, #32
 8002068:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800206a:	f107 0310 	add.w	r3, r7, #16
 800206e:	2200      	movs	r2, #0
 8002070:	601a      	str	r2, [r3, #0]
 8002072:	605a      	str	r2, [r3, #4]
 8002074:	609a      	str	r2, [r3, #8]
 8002076:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002078:	4b23      	ldr	r3, [pc, #140]	; (8002108 <MX_GPIO_Init+0xa4>)
 800207a:	699b      	ldr	r3, [r3, #24]
 800207c:	4a22      	ldr	r2, [pc, #136]	; (8002108 <MX_GPIO_Init+0xa4>)
 800207e:	f043 0310 	orr.w	r3, r3, #16
 8002082:	6193      	str	r3, [r2, #24]
 8002084:	4b20      	ldr	r3, [pc, #128]	; (8002108 <MX_GPIO_Init+0xa4>)
 8002086:	699b      	ldr	r3, [r3, #24]
 8002088:	f003 0310 	and.w	r3, r3, #16
 800208c:	60fb      	str	r3, [r7, #12]
 800208e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002090:	4b1d      	ldr	r3, [pc, #116]	; (8002108 <MX_GPIO_Init+0xa4>)
 8002092:	699b      	ldr	r3, [r3, #24]
 8002094:	4a1c      	ldr	r2, [pc, #112]	; (8002108 <MX_GPIO_Init+0xa4>)
 8002096:	f043 0320 	orr.w	r3, r3, #32
 800209a:	6193      	str	r3, [r2, #24]
 800209c:	4b1a      	ldr	r3, [pc, #104]	; (8002108 <MX_GPIO_Init+0xa4>)
 800209e:	699b      	ldr	r3, [r3, #24]
 80020a0:	f003 0320 	and.w	r3, r3, #32
 80020a4:	60bb      	str	r3, [r7, #8]
 80020a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020a8:	4b17      	ldr	r3, [pc, #92]	; (8002108 <MX_GPIO_Init+0xa4>)
 80020aa:	699b      	ldr	r3, [r3, #24]
 80020ac:	4a16      	ldr	r2, [pc, #88]	; (8002108 <MX_GPIO_Init+0xa4>)
 80020ae:	f043 0304 	orr.w	r3, r3, #4
 80020b2:	6193      	str	r3, [r2, #24]
 80020b4:	4b14      	ldr	r3, [pc, #80]	; (8002108 <MX_GPIO_Init+0xa4>)
 80020b6:	699b      	ldr	r3, [r3, #24]
 80020b8:	f003 0304 	and.w	r3, r3, #4
 80020bc:	607b      	str	r3, [r7, #4]
 80020be:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020c0:	4b11      	ldr	r3, [pc, #68]	; (8002108 <MX_GPIO_Init+0xa4>)
 80020c2:	699b      	ldr	r3, [r3, #24]
 80020c4:	4a10      	ldr	r2, [pc, #64]	; (8002108 <MX_GPIO_Init+0xa4>)
 80020c6:	f043 0308 	orr.w	r3, r3, #8
 80020ca:	6193      	str	r3, [r2, #24]
 80020cc:	4b0e      	ldr	r3, [pc, #56]	; (8002108 <MX_GPIO_Init+0xa4>)
 80020ce:	699b      	ldr	r3, [r3, #24]
 80020d0:	f003 0308 	and.w	r3, r3, #8
 80020d4:	603b      	str	r3, [r7, #0]
 80020d6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 80020d8:	2200      	movs	r2, #0
 80020da:	210f      	movs	r1, #15
 80020dc:	480b      	ldr	r0, [pc, #44]	; (800210c <MX_GPIO_Init+0xa8>)
 80020de:	f7fe fc81 	bl	80009e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80020e2:	230f      	movs	r3, #15
 80020e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020e6:	2301      	movs	r3, #1
 80020e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ea:	2300      	movs	r3, #0
 80020ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ee:	2302      	movs	r3, #2
 80020f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020f2:	f107 0310 	add.w	r3, r7, #16
 80020f6:	4619      	mov	r1, r3
 80020f8:	4804      	ldr	r0, [pc, #16]	; (800210c <MX_GPIO_Init+0xa8>)
 80020fa:	f7fe fb19 	bl	8000730 <HAL_GPIO_Init>

}
 80020fe:	bf00      	nop
 8002100:	3720      	adds	r7, #32
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	40021000 	.word	0x40021000
 800210c:	40011000 	.word	0x40011000

08002110 <MCP_Write_Reg>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void MCP_Write_Reg(uint8_t addr, uint8_t value)
{
 8002110:	b480      	push	{r7}
 8002112:	b085      	sub	sp, #20
 8002114:	af00      	add	r7, sp, #0
 8002116:	4603      	mov	r3, r0
 8002118:	460a      	mov	r2, r1
 800211a:	71fb      	strb	r3, [r7, #7]
 800211c:	4613      	mov	r3, r2
 800211e:	71bb      	strb	r3, [r7, #6]
	uint8_t tx_buf[] = {0x40, addr, value};
 8002120:	2340      	movs	r3, #64	; 0x40
 8002122:	733b      	strb	r3, [r7, #12]
 8002124:	79fb      	ldrb	r3, [r7, #7]
 8002126:	737b      	strb	r3, [r7, #13]
 8002128:	79bb      	ldrb	r3, [r7, #6]
 800212a:	73bb      	strb	r3, [r7, #14]

	GPIOA->ODR &= ~GPIO_ODR_ODR0;
 800212c:	4b17      	ldr	r3, [pc, #92]	; (800218c <MCP_Write_Reg+0x7c>)
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	4a16      	ldr	r2, [pc, #88]	; (800218c <MCP_Write_Reg+0x7c>)
 8002132:	f023 0301 	bic.w	r3, r3, #1
 8002136:	60d3      	str	r3, [r2, #12]

	while( !(SPI1->SR & SPI_SR_TXE) );
 8002138:	bf00      	nop
 800213a:	4b15      	ldr	r3, [pc, #84]	; (8002190 <MCP_Write_Reg+0x80>)
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	f003 0302 	and.w	r3, r3, #2
 8002142:	2b00      	cmp	r3, #0
 8002144:	d0f9      	beq.n	800213a <MCP_Write_Reg+0x2a>
	SPI1->DR = tx_buf[0];
 8002146:	7b3a      	ldrb	r2, [r7, #12]
 8002148:	4b11      	ldr	r3, [pc, #68]	; (8002190 <MCP_Write_Reg+0x80>)
 800214a:	60da      	str	r2, [r3, #12]
	while( !(SPI1->SR & SPI_SR_TXE) );
 800214c:	bf00      	nop
 800214e:	4b10      	ldr	r3, [pc, #64]	; (8002190 <MCP_Write_Reg+0x80>)
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	f003 0302 	and.w	r3, r3, #2
 8002156:	2b00      	cmp	r3, #0
 8002158:	d0f9      	beq.n	800214e <MCP_Write_Reg+0x3e>
	SPI1->DR = tx_buf[1];
 800215a:	7b7a      	ldrb	r2, [r7, #13]
 800215c:	4b0c      	ldr	r3, [pc, #48]	; (8002190 <MCP_Write_Reg+0x80>)
 800215e:	60da      	str	r2, [r3, #12]
	while( !(SPI1->SR & SPI_SR_TXE) );
 8002160:	bf00      	nop
 8002162:	4b0b      	ldr	r3, [pc, #44]	; (8002190 <MCP_Write_Reg+0x80>)
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	f003 0302 	and.w	r3, r3, #2
 800216a:	2b00      	cmp	r3, #0
 800216c:	d0f9      	beq.n	8002162 <MCP_Write_Reg+0x52>
	SPI1->DR = tx_buf[2];
 800216e:	7bba      	ldrb	r2, [r7, #14]
 8002170:	4b07      	ldr	r3, [pc, #28]	; (8002190 <MCP_Write_Reg+0x80>)
 8002172:	60da      	str	r2, [r3, #12]

	GPIOA->ODR |= GPIO_ODR_ODR0;
 8002174:	4b05      	ldr	r3, [pc, #20]	; (800218c <MCP_Write_Reg+0x7c>)
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	4a04      	ldr	r2, [pc, #16]	; (800218c <MCP_Write_Reg+0x7c>)
 800217a:	f043 0301 	orr.w	r3, r3, #1
 800217e:	60d3      	str	r3, [r2, #12]
}
 8002180:	bf00      	nop
 8002182:	3714      	adds	r7, #20
 8002184:	46bd      	mov	sp, r7
 8002186:	bc80      	pop	{r7}
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	40010800 	.word	0x40010800
 8002190:	40013000 	.word	0x40013000

08002194 <Andzej_SPI_Init>:

void Andzej_SPI_Init()
{
 8002194:	b480      	push	{r7}
 8002196:	af00      	add	r7, sp, #0
	RCC->APB2ENR = RCC_APB2ENR_IOPAEN | RCC_APB2ENR_SPI1EN;
 8002198:	4b0f      	ldr	r3, [pc, #60]	; (80021d8 <Andzej_SPI_Init+0x44>)
 800219a:	f241 0204 	movw	r2, #4100	; 0x1004
 800219e:	619a      	str	r2, [r3, #24]

	GPIOA->CRL |= GPIO_CRL_MODE0_0 + GPIO_CRL_MODE5_0 + GPIO_CRL_MODE7_0;
 80021a0:	4b0e      	ldr	r3, [pc, #56]	; (80021dc <Andzej_SPI_Init+0x48>)
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	490d      	ldr	r1, [pc, #52]	; (80021dc <Andzej_SPI_Init+0x48>)
 80021a6:	4b0e      	ldr	r3, [pc, #56]	; (80021e0 <Andzej_SPI_Init+0x4c>)
 80021a8:	4313      	orrs	r3, r2
 80021aa:	600b      	str	r3, [r1, #0]
	GPIOA->CRL &= ~(GPIO_CRL_CNF0_0 + GPIO_CRL_CNF5_0 + GPIO_CRL_CNF6_0 + GPIO_CRL_CNF7_0);
 80021ac:	4b0b      	ldr	r3, [pc, #44]	; (80021dc <Andzej_SPI_Init+0x48>)
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	490a      	ldr	r1, [pc, #40]	; (80021dc <Andzej_SPI_Init+0x48>)
 80021b2:	4b0c      	ldr	r3, [pc, #48]	; (80021e4 <Andzej_SPI_Init+0x50>)
 80021b4:	4013      	ands	r3, r2
 80021b6:	600b      	str	r3, [r1, #0]
	GPIOA->CRL |= GPIO_CRL_CNF5_1 + GPIO_CRL_CNF6_1 + GPIO_CRL_CNF7_1;
 80021b8:	4b08      	ldr	r3, [pc, #32]	; (80021dc <Andzej_SPI_Init+0x48>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a07      	ldr	r2, [pc, #28]	; (80021dc <Andzej_SPI_Init+0x48>)
 80021be:	f043 4308 	orr.w	r3, r3, #2281701376	; 0x88000000
 80021c2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80021c6:	6013      	str	r3, [r2, #0]

	SPI1->CR1 = SPI_CR1_SSM | SPI_CR1_SSI | SPI_CR1_SPE | SPI_CR1_MSTR;
 80021c8:	4b07      	ldr	r3, [pc, #28]	; (80021e8 <Andzej_SPI_Init+0x54>)
 80021ca:	f44f 7251 	mov.w	r2, #836	; 0x344
 80021ce:	601a      	str	r2, [r3, #0]
}
 80021d0:	bf00      	nop
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bc80      	pop	{r7}
 80021d6:	4770      	bx	lr
 80021d8:	40021000 	.word	0x40021000
 80021dc:	40010800 	.word	0x40010800
 80021e0:	10100001 	.word	0x10100001
 80021e4:	bbbffffb 	.word	0xbbbffffb
 80021e8:	40013000 	.word	0x40013000

080021ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80021f0:	f7fd ffac 	bl	800014c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021f4:	f000 f84a 	bl	800228c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021f8:	f7ff ff34 	bl	8002064 <MX_GPIO_Init>
  MX_DMA_Init();
 80021fc:	f7ff ff14 	bl	8002028 <MX_DMA_Init>
  MX_TIM1_Init();
 8002200:	f000 f8f8 	bl	80023f4 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8002204:	f000 f9f4 	bl	80025f0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  //HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8002208:	2104      	movs	r1, #4
 800220a:	481d      	ldr	r0, [pc, #116]	; (8002280 <main+0x94>)
 800220c:	f7ff f8c6 	bl	800139c <HAL_TIM_PWM_Start>
  Andzej_SPI_Init();
 8002210:	f7ff ffc0 	bl	8002194 <Andzej_SPI_Init>
  MCP_Write_Reg(MCP_IODIR, ~0x03);
 8002214:	21fc      	movs	r1, #252	; 0xfc
 8002216:	2000      	movs	r0, #0
 8002218:	f7ff ff7a 	bl	8002110 <MCP_Write_Reg>

  TIM1->CCR1 = 100;
 800221c:	4b19      	ldr	r3, [pc, #100]	; (8002284 <main+0x98>)
 800221e:	2264      	movs	r2, #100	; 0x64
 8002220:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8002222:	2200      	movs	r2, #0
 8002224:	2101      	movs	r1, #1
 8002226:	4818      	ldr	r0, [pc, #96]	; (8002288 <main+0x9c>)
 8002228:	f7fe fbdc 	bl	80009e4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 800222c:	2200      	movs	r2, #0
 800222e:	2102      	movs	r1, #2
 8002230:	4815      	ldr	r0, [pc, #84]	; (8002288 <main+0x9c>)
 8002232:	f7fe fbd7 	bl	80009e4 <HAL_GPIO_WritePin>

  TIM1->CCR2 = 100;
 8002236:	4b13      	ldr	r3, [pc, #76]	; (8002284 <main+0x98>)
 8002238:	2264      	movs	r2, #100	; 0x64
 800223a:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 800223c:	2200      	movs	r2, #0
 800223e:	2104      	movs	r1, #4
 8002240:	4811      	ldr	r0, [pc, #68]	; (8002288 <main+0x9c>)
 8002242:	f7fe fbcf 	bl	80009e4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8002246:	2200      	movs	r2, #0
 8002248:	2108      	movs	r1, #8
 800224a:	480f      	ldr	r0, [pc, #60]	; (8002288 <main+0x9c>)
 800224c:	f7fe fbca 	bl	80009e4 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8002250:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002254:	f7fd ffdc 	bl	8000210 <HAL_Delay>
	  MCP_Write_Reg(MCP_OLAT, 0x01);
	  HAL_Delay(1000);
	  MCP_Write_Reg(MCP_OLAT, 0x00);
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);*/

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8002258:	2201      	movs	r2, #1
 800225a:	2104      	movs	r1, #4
 800225c:	480a      	ldr	r0, [pc, #40]	; (8002288 <main+0x9c>)
 800225e:	f7fe fbc1 	bl	80009e4 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 8002262:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002266:	f7fd ffd3 	bl	8000210 <HAL_Delay>
	  /*MCP_Write_Reg(MCP_OLAT, 0x02);
	  HAL_Delay(1000);
	  MCP_Write_Reg(MCP_OLAT, 0x00);*/
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 800226a:	2200      	movs	r2, #0
 800226c:	2104      	movs	r1, #4
 800226e:	4806      	ldr	r0, [pc, #24]	; (8002288 <main+0x9c>)
 8002270:	f7fe fbb8 	bl	80009e4 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 8002274:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002278:	f7fd ffca 	bl	8000210 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 800227c:	e7ec      	b.n	8002258 <main+0x6c>
 800227e:	bf00      	nop
 8002280:	2000002c 	.word	0x2000002c
 8002284:	40012c00 	.word	0x40012c00
 8002288:	40011000 	.word	0x40011000

0800228c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b090      	sub	sp, #64	; 0x40
 8002290:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002292:	f107 0318 	add.w	r3, r7, #24
 8002296:	2228      	movs	r2, #40	; 0x28
 8002298:	2100      	movs	r1, #0
 800229a:	4618      	mov	r0, r3
 800229c:	f000 fa84 	bl	80027a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022a0:	1d3b      	adds	r3, r7, #4
 80022a2:	2200      	movs	r2, #0
 80022a4:	601a      	str	r2, [r3, #0]
 80022a6:	605a      	str	r2, [r3, #4]
 80022a8:	609a      	str	r2, [r3, #8]
 80022aa:	60da      	str	r2, [r3, #12]
 80022ac:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80022ae:	2302      	movs	r3, #2
 80022b0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022b2:	2301      	movs	r3, #1
 80022b4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80022b6:	2310      	movs	r3, #16
 80022b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022ba:	2302      	movs	r3, #2
 80022bc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80022be:	2300      	movs	r3, #0
 80022c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80022c2:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80022c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022c8:	f107 0318 	add.w	r3, r7, #24
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7fe fba1 	bl	8000a14 <HAL_RCC_OscConfig>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d001      	beq.n	80022dc <SystemClock_Config+0x50>
  {
    Error_Handler();
 80022d8:	f000 f819 	bl	800230e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022dc:	230f      	movs	r3, #15
 80022de:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022e0:	2302      	movs	r3, #2
 80022e2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022e4:	2300      	movs	r3, #0
 80022e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80022e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80022ee:	2300      	movs	r3, #0
 80022f0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80022f2:	1d3b      	adds	r3, r7, #4
 80022f4:	2102      	movs	r1, #2
 80022f6:	4618      	mov	r0, r3
 80022f8:	f7fe fe0c 	bl	8000f14 <HAL_RCC_ClockConfig>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8002302:	f000 f804 	bl	800230e <Error_Handler>
  }
}
 8002306:	bf00      	nop
 8002308:	3740      	adds	r7, #64	; 0x40
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}

0800230e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800230e:	b480      	push	{r7}
 8002310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002312:	bf00      	nop
 8002314:	46bd      	mov	sp, r7
 8002316:	bc80      	pop	{r7}
 8002318:	4770      	bx	lr
	...

0800231c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800231c:	b480      	push	{r7}
 800231e:	b085      	sub	sp, #20
 8002320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002322:	4b15      	ldr	r3, [pc, #84]	; (8002378 <HAL_MspInit+0x5c>)
 8002324:	699b      	ldr	r3, [r3, #24]
 8002326:	4a14      	ldr	r2, [pc, #80]	; (8002378 <HAL_MspInit+0x5c>)
 8002328:	f043 0301 	orr.w	r3, r3, #1
 800232c:	6193      	str	r3, [r2, #24]
 800232e:	4b12      	ldr	r3, [pc, #72]	; (8002378 <HAL_MspInit+0x5c>)
 8002330:	699b      	ldr	r3, [r3, #24]
 8002332:	f003 0301 	and.w	r3, r3, #1
 8002336:	60bb      	str	r3, [r7, #8]
 8002338:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800233a:	4b0f      	ldr	r3, [pc, #60]	; (8002378 <HAL_MspInit+0x5c>)
 800233c:	69db      	ldr	r3, [r3, #28]
 800233e:	4a0e      	ldr	r2, [pc, #56]	; (8002378 <HAL_MspInit+0x5c>)
 8002340:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002344:	61d3      	str	r3, [r2, #28]
 8002346:	4b0c      	ldr	r3, [pc, #48]	; (8002378 <HAL_MspInit+0x5c>)
 8002348:	69db      	ldr	r3, [r3, #28]
 800234a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800234e:	607b      	str	r3, [r7, #4]
 8002350:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002352:	4b0a      	ldr	r3, [pc, #40]	; (800237c <HAL_MspInit+0x60>)
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	60fb      	str	r3, [r7, #12]
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800235e:	60fb      	str	r3, [r7, #12]
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002366:	60fb      	str	r3, [r7, #12]
 8002368:	4a04      	ldr	r2, [pc, #16]	; (800237c <HAL_MspInit+0x60>)
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800236e:	bf00      	nop
 8002370:	3714      	adds	r7, #20
 8002372:	46bd      	mov	sp, r7
 8002374:	bc80      	pop	{r7}
 8002376:	4770      	bx	lr
 8002378:	40021000 	.word	0x40021000
 800237c:	40010000 	.word	0x40010000

08002380 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002384:	bf00      	nop
 8002386:	46bd      	mov	sp, r7
 8002388:	bc80      	pop	{r7}
 800238a:	4770      	bx	lr

0800238c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002390:	e7fe      	b.n	8002390 <HardFault_Handler+0x4>

08002392 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002392:	b480      	push	{r7}
 8002394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002396:	e7fe      	b.n	8002396 <MemManage_Handler+0x4>

08002398 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800239c:	e7fe      	b.n	800239c <BusFault_Handler+0x4>

0800239e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800239e:	b480      	push	{r7}
 80023a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023a2:	e7fe      	b.n	80023a2 <UsageFault_Handler+0x4>

080023a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023a8:	bf00      	nop
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bc80      	pop	{r7}
 80023ae:	4770      	bx	lr

080023b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023b4:	bf00      	nop
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bc80      	pop	{r7}
 80023ba:	4770      	bx	lr

080023bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023c0:	bf00      	nop
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bc80      	pop	{r7}
 80023c6:	4770      	bx	lr

080023c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023cc:	f7fd ff04 	bl	80001d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023d0:	bf00      	nop
 80023d2:	bd80      	pop	{r7, pc}

080023d4 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80023d8:	4802      	ldr	r0, [pc, #8]	; (80023e4 <DMA1_Channel6_IRQHandler+0x10>)
 80023da:	f7fe f8a3 	bl	8000524 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80023de:	bf00      	nop
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	20000074 	.word	0x20000074

080023e8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023ec:	bf00      	nop
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bc80      	pop	{r7}
 80023f2:	4770      	bx	lr

080023f4 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b096      	sub	sp, #88	; 0x58
 80023f8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023fa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80023fe:	2200      	movs	r2, #0
 8002400:	601a      	str	r2, [r3, #0]
 8002402:	605a      	str	r2, [r3, #4]
 8002404:	609a      	str	r2, [r3, #8]
 8002406:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002408:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800240c:	2200      	movs	r2, #0
 800240e:	601a      	str	r2, [r3, #0]
 8002410:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002412:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002416:	2200      	movs	r2, #0
 8002418:	601a      	str	r2, [r3, #0]
 800241a:	605a      	str	r2, [r3, #4]
 800241c:	609a      	str	r2, [r3, #8]
 800241e:	60da      	str	r2, [r3, #12]
 8002420:	611a      	str	r2, [r3, #16]
 8002422:	615a      	str	r2, [r3, #20]
 8002424:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002426:	1d3b      	adds	r3, r7, #4
 8002428:	2220      	movs	r2, #32
 800242a:	2100      	movs	r1, #0
 800242c:	4618      	mov	r0, r3
 800242e:	f000 f9bb 	bl	80027a8 <memset>

  htim1.Instance = TIM1;
 8002432:	4b44      	ldr	r3, [pc, #272]	; (8002544 <MX_TIM1_Init+0x150>)
 8002434:	4a44      	ldr	r2, [pc, #272]	; (8002548 <MX_TIM1_Init+0x154>)
 8002436:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 639;
 8002438:	4b42      	ldr	r3, [pc, #264]	; (8002544 <MX_TIM1_Init+0x150>)
 800243a:	f240 227f 	movw	r2, #639	; 0x27f
 800243e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002440:	4b40      	ldr	r3, [pc, #256]	; (8002544 <MX_TIM1_Init+0x150>)
 8002442:	2200      	movs	r2, #0
 8002444:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 8002446:	4b3f      	ldr	r3, [pc, #252]	; (8002544 <MX_TIM1_Init+0x150>)
 8002448:	2263      	movs	r2, #99	; 0x63
 800244a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800244c:	4b3d      	ldr	r3, [pc, #244]	; (8002544 <MX_TIM1_Init+0x150>)
 800244e:	2200      	movs	r2, #0
 8002450:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002452:	4b3c      	ldr	r3, [pc, #240]	; (8002544 <MX_TIM1_Init+0x150>)
 8002454:	2200      	movs	r2, #0
 8002456:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002458:	4b3a      	ldr	r3, [pc, #232]	; (8002544 <MX_TIM1_Init+0x150>)
 800245a:	2200      	movs	r2, #0
 800245c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800245e:	4839      	ldr	r0, [pc, #228]	; (8002544 <MX_TIM1_Init+0x150>)
 8002460:	f7fe fef4 	bl	800124c <HAL_TIM_Base_Init>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d001      	beq.n	800246e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800246a:	f7ff ff50 	bl	800230e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800246e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002472:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002474:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002478:	4619      	mov	r1, r3
 800247a:	4832      	ldr	r0, [pc, #200]	; (8002544 <MX_TIM1_Init+0x150>)
 800247c:	f7ff f8ee 	bl	800165c <HAL_TIM_ConfigClockSource>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d001      	beq.n	800248a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002486:	f7ff ff42 	bl	800230e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800248a:	482e      	ldr	r0, [pc, #184]	; (8002544 <MX_TIM1_Init+0x150>)
 800248c:	f7fe ff2d 	bl	80012ea <HAL_TIM_PWM_Init>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d001      	beq.n	800249a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002496:	f7ff ff3a 	bl	800230e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800249a:	2300      	movs	r3, #0
 800249c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800249e:	2300      	movs	r3, #0
 80024a0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80024a2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80024a6:	4619      	mov	r1, r3
 80024a8:	4826      	ldr	r0, [pc, #152]	; (8002544 <MX_TIM1_Init+0x150>)
 80024aa:	f7ff fc33 	bl	8001d14 <HAL_TIMEx_MasterConfigSynchronization>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d001      	beq.n	80024b8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80024b4:	f7ff ff2b 	bl	800230e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024b8:	2360      	movs	r3, #96	; 0x60
 80024ba:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80024bc:	2300      	movs	r3, #0
 80024be:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024c0:	2300      	movs	r3, #0
 80024c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80024c4:	2300      	movs	r3, #0
 80024c6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024c8:	2300      	movs	r3, #0
 80024ca:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80024cc:	2300      	movs	r3, #0
 80024ce:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80024d0:	2300      	movs	r3, #0
 80024d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80024d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024d8:	2200      	movs	r2, #0
 80024da:	4619      	mov	r1, r3
 80024dc:	4819      	ldr	r0, [pc, #100]	; (8002544 <MX_TIM1_Init+0x150>)
 80024de:	f7fe ffff 	bl	80014e0 <HAL_TIM_PWM_ConfigChannel>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d001      	beq.n	80024ec <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80024e8:	f7ff ff11 	bl	800230e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80024ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024f0:	2204      	movs	r2, #4
 80024f2:	4619      	mov	r1, r3
 80024f4:	4813      	ldr	r0, [pc, #76]	; (8002544 <MX_TIM1_Init+0x150>)
 80024f6:	f7fe fff3 	bl	80014e0 <HAL_TIM_PWM_ConfigChannel>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d001      	beq.n	8002504 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8002500:	f7ff ff05 	bl	800230e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002504:	2300      	movs	r3, #0
 8002506:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002508:	2300      	movs	r3, #0
 800250a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800250c:	2300      	movs	r3, #0
 800250e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002510:	2300      	movs	r3, #0
 8002512:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002514:	2300      	movs	r3, #0
 8002516:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002518:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800251c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800251e:	2300      	movs	r3, #0
 8002520:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002522:	1d3b      	adds	r3, r7, #4
 8002524:	4619      	mov	r1, r3
 8002526:	4807      	ldr	r0, [pc, #28]	; (8002544 <MX_TIM1_Init+0x150>)
 8002528:	f7ff fc52 	bl	8001dd0 <HAL_TIMEx_ConfigBreakDeadTime>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d001      	beq.n	8002536 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8002532:	f7ff feec 	bl	800230e <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8002536:	4803      	ldr	r0, [pc, #12]	; (8002544 <MX_TIM1_Init+0x150>)
 8002538:	f000 f826 	bl	8002588 <HAL_TIM_MspPostInit>

}
 800253c:	bf00      	nop
 800253e:	3758      	adds	r7, #88	; 0x58
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}
 8002544:	2000002c 	.word	0x2000002c
 8002548:	40012c00 	.word	0x40012c00

0800254c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800254c:	b480      	push	{r7}
 800254e:	b085      	sub	sp, #20
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a09      	ldr	r2, [pc, #36]	; (8002580 <HAL_TIM_Base_MspInit+0x34>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d10b      	bne.n	8002576 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800255e:	4b09      	ldr	r3, [pc, #36]	; (8002584 <HAL_TIM_Base_MspInit+0x38>)
 8002560:	699b      	ldr	r3, [r3, #24]
 8002562:	4a08      	ldr	r2, [pc, #32]	; (8002584 <HAL_TIM_Base_MspInit+0x38>)
 8002564:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002568:	6193      	str	r3, [r2, #24]
 800256a:	4b06      	ldr	r3, [pc, #24]	; (8002584 <HAL_TIM_Base_MspInit+0x38>)
 800256c:	699b      	ldr	r3, [r3, #24]
 800256e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002572:	60fb      	str	r3, [r7, #12]
 8002574:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002576:	bf00      	nop
 8002578:	3714      	adds	r7, #20
 800257a:	46bd      	mov	sp, r7
 800257c:	bc80      	pop	{r7}
 800257e:	4770      	bx	lr
 8002580:	40012c00 	.word	0x40012c00
 8002584:	40021000 	.word	0x40021000

08002588 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b088      	sub	sp, #32
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002590:	f107 0310 	add.w	r3, r7, #16
 8002594:	2200      	movs	r2, #0
 8002596:	601a      	str	r2, [r3, #0]
 8002598:	605a      	str	r2, [r3, #4]
 800259a:	609a      	str	r2, [r3, #8]
 800259c:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a10      	ldr	r2, [pc, #64]	; (80025e4 <HAL_TIM_MspPostInit+0x5c>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d118      	bne.n	80025da <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025a8:	4b0f      	ldr	r3, [pc, #60]	; (80025e8 <HAL_TIM_MspPostInit+0x60>)
 80025aa:	699b      	ldr	r3, [r3, #24]
 80025ac:	4a0e      	ldr	r2, [pc, #56]	; (80025e8 <HAL_TIM_MspPostInit+0x60>)
 80025ae:	f043 0304 	orr.w	r3, r3, #4
 80025b2:	6193      	str	r3, [r2, #24]
 80025b4:	4b0c      	ldr	r3, [pc, #48]	; (80025e8 <HAL_TIM_MspPostInit+0x60>)
 80025b6:	699b      	ldr	r3, [r3, #24]
 80025b8:	f003 0304 	and.w	r3, r3, #4
 80025bc:	60fb      	str	r3, [r7, #12]
 80025be:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80025c0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80025c4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c6:	2302      	movs	r3, #2
 80025c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ca:	2302      	movs	r3, #2
 80025cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025ce:	f107 0310 	add.w	r3, r7, #16
 80025d2:	4619      	mov	r1, r3
 80025d4:	4805      	ldr	r0, [pc, #20]	; (80025ec <HAL_TIM_MspPostInit+0x64>)
 80025d6:	f7fe f8ab 	bl	8000730 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80025da:	bf00      	nop
 80025dc:	3720      	adds	r7, #32
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	40012c00 	.word	0x40012c00
 80025e8:	40021000 	.word	0x40021000
 80025ec:	40010800 	.word	0x40010800

080025f0 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80025f4:	4b11      	ldr	r3, [pc, #68]	; (800263c <MX_USART2_UART_Init+0x4c>)
 80025f6:	4a12      	ldr	r2, [pc, #72]	; (8002640 <MX_USART2_UART_Init+0x50>)
 80025f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80025fa:	4b10      	ldr	r3, [pc, #64]	; (800263c <MX_USART2_UART_Init+0x4c>)
 80025fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002600:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002602:	4b0e      	ldr	r3, [pc, #56]	; (800263c <MX_USART2_UART_Init+0x4c>)
 8002604:	2200      	movs	r2, #0
 8002606:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002608:	4b0c      	ldr	r3, [pc, #48]	; (800263c <MX_USART2_UART_Init+0x4c>)
 800260a:	2200      	movs	r2, #0
 800260c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800260e:	4b0b      	ldr	r3, [pc, #44]	; (800263c <MX_USART2_UART_Init+0x4c>)
 8002610:	2200      	movs	r2, #0
 8002612:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002614:	4b09      	ldr	r3, [pc, #36]	; (800263c <MX_USART2_UART_Init+0x4c>)
 8002616:	220c      	movs	r2, #12
 8002618:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800261a:	4b08      	ldr	r3, [pc, #32]	; (800263c <MX_USART2_UART_Init+0x4c>)
 800261c:	2200      	movs	r2, #0
 800261e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002620:	4b06      	ldr	r3, [pc, #24]	; (800263c <MX_USART2_UART_Init+0x4c>)
 8002622:	2200      	movs	r2, #0
 8002624:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002626:	4805      	ldr	r0, [pc, #20]	; (800263c <MX_USART2_UART_Init+0x4c>)
 8002628:	f7ff fc23 	bl	8001e72 <HAL_UART_Init>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002632:	f7ff fe6c 	bl	800230e <Error_Handler>
  }

}
 8002636:	bf00      	nop
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	200000b8 	.word	0x200000b8
 8002640:	40004400 	.word	0x40004400

08002644 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b088      	sub	sp, #32
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800264c:	f107 0310 	add.w	r3, r7, #16
 8002650:	2200      	movs	r2, #0
 8002652:	601a      	str	r2, [r3, #0]
 8002654:	605a      	str	r2, [r3, #4]
 8002656:	609a      	str	r2, [r3, #8]
 8002658:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a28      	ldr	r2, [pc, #160]	; (8002700 <HAL_UART_MspInit+0xbc>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d149      	bne.n	80026f8 <HAL_UART_MspInit+0xb4>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002664:	4b27      	ldr	r3, [pc, #156]	; (8002704 <HAL_UART_MspInit+0xc0>)
 8002666:	69db      	ldr	r3, [r3, #28]
 8002668:	4a26      	ldr	r2, [pc, #152]	; (8002704 <HAL_UART_MspInit+0xc0>)
 800266a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800266e:	61d3      	str	r3, [r2, #28]
 8002670:	4b24      	ldr	r3, [pc, #144]	; (8002704 <HAL_UART_MspInit+0xc0>)
 8002672:	69db      	ldr	r3, [r3, #28]
 8002674:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002678:	60fb      	str	r3, [r7, #12]
 800267a:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800267c:	4b21      	ldr	r3, [pc, #132]	; (8002704 <HAL_UART_MspInit+0xc0>)
 800267e:	699b      	ldr	r3, [r3, #24]
 8002680:	4a20      	ldr	r2, [pc, #128]	; (8002704 <HAL_UART_MspInit+0xc0>)
 8002682:	f043 0304 	orr.w	r3, r3, #4
 8002686:	6193      	str	r3, [r2, #24]
 8002688:	4b1e      	ldr	r3, [pc, #120]	; (8002704 <HAL_UART_MspInit+0xc0>)
 800268a:	699b      	ldr	r3, [r3, #24]
 800268c:	f003 0304 	and.w	r3, r3, #4
 8002690:	60bb      	str	r3, [r7, #8]
 8002692:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002694:	230c      	movs	r3, #12
 8002696:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002698:	2302      	movs	r3, #2
 800269a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800269c:	2302      	movs	r3, #2
 800269e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026a0:	f107 0310 	add.w	r3, r7, #16
 80026a4:	4619      	mov	r1, r3
 80026a6:	4818      	ldr	r0, [pc, #96]	; (8002708 <HAL_UART_MspInit+0xc4>)
 80026a8:	f7fe f842 	bl	8000730 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80026ac:	4b17      	ldr	r3, [pc, #92]	; (800270c <HAL_UART_MspInit+0xc8>)
 80026ae:	4a18      	ldr	r2, [pc, #96]	; (8002710 <HAL_UART_MspInit+0xcc>)
 80026b0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026b2:	4b16      	ldr	r3, [pc, #88]	; (800270c <HAL_UART_MspInit+0xc8>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026b8:	4b14      	ldr	r3, [pc, #80]	; (800270c <HAL_UART_MspInit+0xc8>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80026be:	4b13      	ldr	r3, [pc, #76]	; (800270c <HAL_UART_MspInit+0xc8>)
 80026c0:	2280      	movs	r2, #128	; 0x80
 80026c2:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026c4:	4b11      	ldr	r3, [pc, #68]	; (800270c <HAL_UART_MspInit+0xc8>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026ca:	4b10      	ldr	r3, [pc, #64]	; (800270c <HAL_UART_MspInit+0xc8>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80026d0:	4b0e      	ldr	r3, [pc, #56]	; (800270c <HAL_UART_MspInit+0xc8>)
 80026d2:	2220      	movs	r2, #32
 80026d4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80026d6:	4b0d      	ldr	r3, [pc, #52]	; (800270c <HAL_UART_MspInit+0xc8>)
 80026d8:	2200      	movs	r2, #0
 80026da:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80026dc:	480b      	ldr	r0, [pc, #44]	; (800270c <HAL_UART_MspInit+0xc8>)
 80026de:	f7fd fec7 	bl	8000470 <HAL_DMA_Init>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d001      	beq.n	80026ec <HAL_UART_MspInit+0xa8>
    {
      Error_Handler();
 80026e8:	f7ff fe11 	bl	800230e <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	4a07      	ldr	r2, [pc, #28]	; (800270c <HAL_UART_MspInit+0xc8>)
 80026f0:	635a      	str	r2, [r3, #52]	; 0x34
 80026f2:	4a06      	ldr	r2, [pc, #24]	; (800270c <HAL_UART_MspInit+0xc8>)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80026f8:	bf00      	nop
 80026fa:	3720      	adds	r7, #32
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	40004400 	.word	0x40004400
 8002704:	40021000 	.word	0x40021000
 8002708:	40010800 	.word	0x40010800
 800270c:	20000074 	.word	0x20000074
 8002710:	4002006c 	.word	0x4002006c

08002714 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002714:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002716:	e003      	b.n	8002720 <LoopCopyDataInit>

08002718 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002718:	4b0b      	ldr	r3, [pc, #44]	; (8002748 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800271a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800271c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800271e:	3104      	adds	r1, #4

08002720 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002720:	480a      	ldr	r0, [pc, #40]	; (800274c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002722:	4b0b      	ldr	r3, [pc, #44]	; (8002750 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002724:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002726:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002728:	d3f6      	bcc.n	8002718 <CopyDataInit>
  ldr r2, =_sbss
 800272a:	4a0a      	ldr	r2, [pc, #40]	; (8002754 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800272c:	e002      	b.n	8002734 <LoopFillZerobss>

0800272e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800272e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002730:	f842 3b04 	str.w	r3, [r2], #4

08002734 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002734:	4b08      	ldr	r3, [pc, #32]	; (8002758 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002736:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002738:	d3f9      	bcc.n	800272e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800273a:	f7ff fe55 	bl	80023e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800273e:	f000 f80f 	bl	8002760 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002742:	f7ff fd53 	bl	80021ec <main>
  bx lr
 8002746:	4770      	bx	lr
  ldr r3, =_sidata
 8002748:	08002804 	.word	0x08002804
  ldr r0, =_sdata
 800274c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002750:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8002754:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8002758:	200000f8 	.word	0x200000f8

0800275c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800275c:	e7fe      	b.n	800275c <ADC1_2_IRQHandler>
	...

08002760 <__libc_init_array>:
 8002760:	b570      	push	{r4, r5, r6, lr}
 8002762:	2500      	movs	r5, #0
 8002764:	4e0c      	ldr	r6, [pc, #48]	; (8002798 <__libc_init_array+0x38>)
 8002766:	4c0d      	ldr	r4, [pc, #52]	; (800279c <__libc_init_array+0x3c>)
 8002768:	1ba4      	subs	r4, r4, r6
 800276a:	10a4      	asrs	r4, r4, #2
 800276c:	42a5      	cmp	r5, r4
 800276e:	d109      	bne.n	8002784 <__libc_init_array+0x24>
 8002770:	f000 f822 	bl	80027b8 <_init>
 8002774:	2500      	movs	r5, #0
 8002776:	4e0a      	ldr	r6, [pc, #40]	; (80027a0 <__libc_init_array+0x40>)
 8002778:	4c0a      	ldr	r4, [pc, #40]	; (80027a4 <__libc_init_array+0x44>)
 800277a:	1ba4      	subs	r4, r4, r6
 800277c:	10a4      	asrs	r4, r4, #2
 800277e:	42a5      	cmp	r5, r4
 8002780:	d105      	bne.n	800278e <__libc_init_array+0x2e>
 8002782:	bd70      	pop	{r4, r5, r6, pc}
 8002784:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002788:	4798      	blx	r3
 800278a:	3501      	adds	r5, #1
 800278c:	e7ee      	b.n	800276c <__libc_init_array+0xc>
 800278e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002792:	4798      	blx	r3
 8002794:	3501      	adds	r5, #1
 8002796:	e7f2      	b.n	800277e <__libc_init_array+0x1e>
 8002798:	080027fc 	.word	0x080027fc
 800279c:	080027fc 	.word	0x080027fc
 80027a0:	080027fc 	.word	0x080027fc
 80027a4:	08002800 	.word	0x08002800

080027a8 <memset>:
 80027a8:	4603      	mov	r3, r0
 80027aa:	4402      	add	r2, r0
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d100      	bne.n	80027b2 <memset+0xa>
 80027b0:	4770      	bx	lr
 80027b2:	f803 1b01 	strb.w	r1, [r3], #1
 80027b6:	e7f9      	b.n	80027ac <memset+0x4>

080027b8 <_init>:
 80027b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027ba:	bf00      	nop
 80027bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027be:	bc08      	pop	{r3}
 80027c0:	469e      	mov	lr, r3
 80027c2:	4770      	bx	lr

080027c4 <_fini>:
 80027c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027c6:	bf00      	nop
 80027c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027ca:	bc08      	pop	{r3}
 80027cc:	469e      	mov	lr, r3
 80027ce:	4770      	bx	lr
